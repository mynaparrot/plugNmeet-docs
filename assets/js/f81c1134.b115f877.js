"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"open-source-webinar-software-platform","metadata":{"permalink":"/blog/open-source-webinar-software-platform","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-28-open-source-webinar-software-platform.md","source":"@site/blog/2025-10-28-open-source-webinar-software-platform.md","title":"Looking for Open Source Webinar Software? Here\u2019s Why You Need a Platform, Not Just a Tool.","description":"When you search for open source webinar software, you\'re looking for more than just a way to talk to people online. You\'re looking for control. You want to own your brand, manage your audience, and create a unique, professional presentation without being locked into the expensive, rigid ecosystem of proprietary tools like Zoom Webinars or GoToWebinar.","date":"2025-10-28T00:00:00.000Z","tags":[{"inline":true,"label":"webinar","permalink":"/blog/tags/webinar"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"business","permalink":"/blog/tags/business"},{"inline":true,"label":"marketing","permalink":"/blog/tags/marketing"},{"inline":true,"label":"saas-alternative","permalink":"/blog/tags/saas-alternative"},{"inline":true,"label":"platform","permalink":"/blog/tags/platform"}],"readingTime":5.35,"hasTruncateMarker":true,"authors":[{"name":"Bob Teng","title":"Developer Advocate","url":"https://github.com/wbobteng","imageURL":"https://github.com/wbobteng.png","key":"bob","page":null}],"frontMatter":{"title":"Looking for Open Source Webinar Software? Here\u2019s Why You Need a Platform, Not Just a Tool.","slug":"open-source-webinar-software-platform","authors":["bob"],"tags":["webinar","open-source","business","marketing","saas-alternative","platform"]},"unlisted":false,"nextItem":{"title":"Meet Users Where They Are: Why We Build Plugins, Not Another Standalone App","permalink":"/blog/plugin-first-philosophy"}},"content":"When you search for **open source webinar software**, you\'re looking for more than just a way to talk to people online. You\'re looking for control. You want to own your brand, manage your audience, and create a unique, professional presentation without being locked into the expensive, rigid ecosystem of proprietary tools like Zoom Webinars or GoToWebinar.\\n\\nMany open-source projects offer a basic meeting experience. But a webinar is not just a meeting. It has a different structure, different roles, and different goals. You need a platform that understands this distinction.\\n\\nAt plugNmeet, we believe the best webinar experience isn\'t a one-size-fits-all tool. It\'s a flexible, API-first platform that gives you the building blocks to create the *exact* webinar workflow you need. This article explains how.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n## What Makes a Webinar Different?\\n\\nA webinar is a performance. It has a cast, a stage, and an audience. This requires a specific set of features that a standard meeting tool often lacks:\\n\\n1.  **Clear Roles:** You need a clear distinction between presenters (who can speak and share their screen) and attendees (who primarily listen and watch).\\n2.  **Audience Engagement Tools:** You need structured ways for the audience to interact, like Q&A sessions, polls, and hand-raising.\\n3.  **A Branded \\"Stage\\":** The experience should feel like your event, with your branding, not a generic third-party application.\\n4.  **Post-Webinar Automation:** The recording is a valuable asset. You need to be able to access it easily and automate what happens next.\\n\\nHere\u2019s how plugNmeet is architected to deliver on all four points.\\n\\n## 1. The Digital Green Room: Unmatched Control for Hosts and Presenters\\n\\nWith most webinar software, you\'re stuck with rigid, predefined roles. plugNmeet provides a flexible, multi-layered system that separates the job of **moderating the audience** from the job of **presenting the content**.\\n\\n*   **How We Solve It:**\\n    1.  **You Pre-Configure the Rules:** Before the webinar begins, you decide the default experience for your attendees. When creating a room via our API, you can pass a `default_lock_settings` object to start with everything locked down: microphones, webcams, screen sharing, etc. This creates a secure \\"digital green room\\" where your audience joins in a listen-only mode by default.\\n\\n    2.  **The Admin Moderates the Audience:** The user designated as `is_admin: true` has full control over the audience. During the live event, the admin can:\\n        *   **Unlock a feature globally:** For example, unlock the chat for everyone during a Q&A session.\\n        *   **Grant permission individually:** Click on a specific attendee\'s name and allow them to unmute their microphone to ask a question, without giving them any other privileges.\\n\\n    3.  **The Presenter Controls the Content:** The admin can designate any user as the **Presenter**. This is a special role focused on content delivery. The Presenter has unique abilities that no one else has, not even the admin, such as:\\n        *   Uploading PDF or Office documents to the whiteboard.\\n        *   Changing pages on an uploaded document for everyone to see.\\n\\nThis separation of roles is incredibly powerful. Your main speaker (the Presenter) can focus on delivering their content, while a separate host (the Admin) can focus on managing the audience, fielding questions, and ensuring the event runs smoothly. It\'s a system designed for a professional, team-run webinar.\\n\\n## 2. Beyond Chat: Structured Engagement with Polls and Q&A\\n\\nIn a large webinar, using the main chat for questions is a recipe for chaos. Important questions get buried in a flood of \\"hellos\\" and general comments. A professional event requires professional tools for audience interaction.\\n\\n*   **How We Solve It:** plugNmeet provides tools designed for structured engagement, moving beyond a simple chat window.\\n    *   **Live Polls for Q&A and Quizzes:** This is the perfect tool for structured interaction. The host can create a poll on the fly with multiple options, essentially creating a live quiz or a Q&A session. Attendees vote, and the host sees the results update in real-time. When the poll ends, the host can **publish the results**, sharing a clean, graphical summary with the entire audience. This is a clean, manageable, and professional way to gauge opinion or get answers to specific questions.\\n    *   **Raise Hand:** For moderated verbal questions, attendees can use the \\"Raise Hand\\" feature to get the host\'s attention without interrupting the speaker.\\n    *   **Chat for Messaging:** The chat remains available for general messaging and file sharing, keeping it separate from the structured Q&A happening in the polls.\\n\\n## 3. Your Stage, Your Brand\\n\\nYour webinar is your show. It shouldn\'t look and feel like a Zoom meeting.\\n\\n*   **How We Solve It:** As we detailed in our post on true white-labeling, plugNmeet offers deep customization. You can change the colors, add your logo, and even use our `getClientFiles` API to completely rebuild the layout, creating a fully branded, seamless experience for your audience.\\n\\n## 4. The After-Show: Owning Your Content\\n\\nWith SaaS platforms, your recording is often trapped on their cloud, subject to their retention policies and pricing.\\n\\n*   **How We Solve It:** With plugNmeet, you own your content. Recordings are saved directly to your own server. And with our `end_recording` webhook, you can build powerful post-webinar automations. For example, you can automatically:\\n    *   Upload the recording to your YouTube channel.\\n    *   Add the video to a \\"past webinars\\" section on your website.\\n    *   Send an email to all attendees with a link to the recording.\\n\\n---\\n\\n## Conclusion: Stop Searching for a Tool, Start Building on a Platform\\n\\nWhen you search for **open source webinar software**, don\'t settle for a rigid, pre-built tool that forces you into its workflow.\\n\\nChoose a platform.\\n\\nplugNmeet provides the flexible, powerful, and open-source foundation you need to build a professional, branded, and automated webinar experience that is truly your own.\\n\\nAnd if you\'re running your community on a platform like **WordPress or Joomla**, the journey is even easier. We have ready-to-use, official plugins that integrate all of this power directly into your existing website in minutes, no coding required.\\n\\nWhether you\'re a developer building a custom application from scratch or a site administrator looking for a simple, powerful integration, plugNmeet provides the tools to help you create the perfect webinar experience.\\n\\n---\\n**Ready to build your perfect webinar platform?**\\n\\n*   **Try our [Live Demo](https://demo.plugnmeet.com/landing.html) to see the features in action**\\n*   **Explore our [Open-Source Project on GitHub](https://github.com/mynaparrot/plugNmeet-server)**\\n*   **Read our [API Documentation](/docs/api/intro) to start building**"},{"id":"plugin-first-philosophy","metadata":{"permalink":"/blog/plugin-first-philosophy","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-28-plugin-first-philosophy.md","source":"@site/blog/2025-10-28-plugin-first-philosophy.md","title":"Meet Users Where They Are: Why We Build Plugins, Not Another Standalone App","description":"If you manage a Learning Management System (LMS) like Moodle or a Content Management System (CMS) like WordPress, you\'ve likely faced this frustrating scenario: you have a vibrant community, a rich content library, and a well-defined user base, but the moment you need to host a live class or a webinar, you have to send everyone away to a third-party, standalone application.","date":"2025-10-28T00:00:00.000Z","tags":[{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"lms","permalink":"/blog/tags/lms"},{"inline":true,"label":"cms","permalink":"/blog/tags/cms"},{"inline":true,"label":"moodle","permalink":"/blog/tags/moodle"},{"inline":true,"label":"wordpress","permalink":"/blog/tags/wordpress"},{"inline":true,"label":"integration","permalink":"/blog/tags/integration"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"}],"readingTime":3.59,"hasTruncateMarker":true,"authors":[{"name":"Chaboud Simon","title":"Community & Marketing Lead","url":"https://github.com/saimonzone","imageURL":"https://github.com/saimonzone.png","key":"simon","page":null}],"frontMatter":{"title":"Meet Users Where They Are: Why We Build Plugins, Not Another Standalone App","slug":"plugin-first-philosophy","authors":["simon"],"tags":["plugin","lms","cms","moodle","wordpress","integration","architecture"]},"unlisted":false,"prevItem":{"title":"Looking for Open Source Webinar Software? Here\u2019s Why You Need a Platform, Not Just a Tool.","permalink":"/blog/open-source-webinar-software-platform"},"nextItem":{"title":"Building a Secure and Scalable E-Learning Platform with Plug-N-Meet and Moodle","permalink":"/blog/secure-scalable-moodle-e-learning-platform"}},"content":"If you manage a Learning Management System (LMS) like Moodle or a Content Management System (CMS) like WordPress, you\'ve likely faced this frustrating scenario: you have a vibrant community, a rich content library, and a well-defined user base, but the moment you need to host a live class or a webinar, you have to send everyone away to a third-party, standalone application.\\n\\nYou generate a Zoom link, post it on your site, and hope your users can find it, log in correctly, and navigate back when it\'s over. This experience is clunky, disjointed, and it breaks the seamless learning environment you\'ve worked so hard to build.\\n\\nAt plugNmeet, we believe this is a fundamentally flawed workflow. That\'s why we made a deliberate architectural choice: to be a **plugin-first platform**, not just another standalone app.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n## The Friction of the Standalone App\\n\\nStandalone video conferencing tools are powerful, but when used alongside an existing platform, they create unnecessary friction:\\n\\n1.  **The Jarring Context Switch:** Sending users to an external domain is a disruptive experience. You lose control over the branding, the user journey, and you pull your users out of the very ecosystem you want them to engage with.\\n\\n2.  **The User Management Nightmare:** Your LMS or CMS already has a robust user database with roles and permissions. A standalone video app forces you to manage a second, parallel set of users, or to build and maintain a complex single sign-on (SSO) integration.\\n\\n3.  **The Siloed Data:** When a meeting is over, where does the recording go? Where are the chat logs? With a standalone app, this valuable data is trapped on a third-party cloud, completely disconnected from the course, article, or user group it belongs to.\\n\\n## Our Philosophy: A Deeply Integrated Communication Layer\\n\\nWe believe that for platforms like Moodle, WordPress, or Joomla, video conferencing shouldn\'t be a separate destination. It should be a **native feature**, a deeply integrated communication layer.\\n\\nBy focusing on plugins, we allow you to:\\n\\n*   **Leverage Your Existing Infrastructure:** Our plugins use your existing user database. A teacher in Moodle is a teacher in plugNmeet. A student is a student. There are no new accounts to create and no complex authentication to manage. It just works.\\n\\n*   **Create a Seamless User Experience:** Users never have to leave your domain. They join a live class directly from the course page. They participate in a webinar without ever seeing a third-party logo. The entire experience feels like a natural extension of your own platform.\\n\\n*   **Keep Data Contextual and Connected:** When a meeting is recorded, the recording automatically appears on the relevant course page in Moodle. The data belongs to the context in which it was created, making it easy for users to find and for you to manage.\\n\\n### A Real-World Example: The Moodle Workflow\\n\\nImagine a teacher setting up a live class. With the plugNmeet plugin:\\n\\n1.  She is already logged into her Moodle course.\\n2.  She clicks \\"Add an activity or resource\\" and selects \\"plugNmeet.\\"\\n3.  She sets the time and a few parameters, and the meeting is created.\\n\\nFor the student, the process is even simpler. They log into their course, see the link for the live session, and click it. They are instantly and securely joined to the meeting. There are no new tabs, no external apps to launch, and no confusion.\\n\\nThis is the power of a plugin-first approach.\\n\\n---\\n\\n## Our Commitment to the Ecosystem\\n\\nWe are not trying to build a separate island for your users to visit. We are building the bridges that bring powerful, self-hosted video communication directly into the platforms you already use and trust.\\n\\nOur Moodle plugin is just the beginning. Our vision is for plugNmeet to be the native, self-hosted video layer for every major LMS and CMS. We are actively working to expand our ecosystem of plugins and welcome community contributions to bring plugNmeet to even more platforms.\\n\\nplugNmeet isn\'t a destination; it\'s a feature. It\'s the communication layer your platform has been missing.\\n\\n---\\n**Ready to integrate powerful video into your platform?**\\n\\n*   **Check out our [Moodle Plugin](/docs/user-guide/moodle-integration)**\\n*   **Explore our Open-Source Project on [GitHub](https://github.com/mynaparrot/plugNmeet-server)**\\n*   **Read our [API Documentation](/docs/api/intro) to build your own integration**"},{"id":"secure-scalable-moodle-e-learning-platform","metadata":{"permalink":"/blog/secure-scalable-moodle-e-learning-platform","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-28-secure-scalable-moodle-e-learning-platform.md","source":"@site/blog/2025-10-28-secure-scalable-moodle-e-learning-platform.md","title":"Building a Secure and Scalable E-Learning Platform with Plug-N-Meet and Moodle","description":"For educators and institutions using Moodle, the goal is to create a seamless, engaging, and secure learning environment. However, when it\'s time for a live virtual class, many are forced to send their students to an external, generic video conferencing link. This experience is often disjointed, and the tools provided are frequently limited to passive screen sharing.","date":"2025-10-28T00:00:00.000Z","tags":[{"inline":true,"label":"moodle","permalink":"/blog/tags/moodle"},{"inline":true,"label":"e-learning","permalink":"/blog/tags/e-learning"},{"inline":true,"label":"education","permalink":"/blog/tags/education"},{"inline":true,"label":"whiteboard","permalink":"/blog/tags/whiteboard"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"excalidraw","permalink":"/blog/tags/excalidraw"},{"inline":true,"label":"security","permalink":"/blog/tags/security"},{"inline":true,"label":"scalability","permalink":"/blog/tags/scalability"}],"readingTime":4.32,"hasTruncateMarker":true,"authors":[{"name":"Bob Teng","title":"Developer Advocate","url":"https://github.com/wbobteng","imageURL":"https://github.com/wbobteng.png","key":"bob","page":null}],"frontMatter":{"title":"Building a Secure and Scalable E-Learning Platform with Plug-N-Meet and Moodle","slug":"secure-scalable-moodle-e-learning-platform","authors":["bob"],"tags":["moodle","e-learning","education","whiteboard","collaboration","excalidraw","security","scalability"]},"unlisted":false,"prevItem":{"title":"Meet Users Where They Are: Why We Build Plugins, Not Another Standalone App","permalink":"/blog/plugin-first-philosophy"},"nextItem":{"title":"Why We Chose LiveKit and NATS: A Deep Dive into Our Backend Architecture","permalink":"/blog/backend-architecture-deep-dive"}},"content":"For educators and institutions using Moodle, the goal is to create a seamless, engaging, and secure learning environment. However, when it\'s time for a live virtual class, many are forced to send their students to an external, generic video conferencing link. This experience is often disjointed, and the tools provided are frequently limited to passive screen sharing.\\n\\nWhat if your live classroom felt like a native part of Moodle? What if you could move beyond one-way screen sharing to a truly interactive and collaborative canvas, all while maintaining the highest levels of security and performance?\\n\\nBy integrating the **plugNmeet** activity module into Moodle, you can achieve exactly that. This post explores how to leverage plugNmeet\'s powerful, built-in collaborative tools\u2014the interactive whiteboard and shared notepad\u2014to build a superior e-learning platform.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n### Beyond Screen Sharing: The Interactive Whiteboard as a Presentation Tool\\n\\nScreen sharing is a one-way street. It\u2019s a passive experience where students watch you click through slides. An interactive whiteboard, however, is a two-way conversation.\\n\\nOur whiteboard, powered by the excellent **Excalidraw** engine, is more than just a blank canvas; it\'s a dynamic teaching surface. Its most powerful feature for educators is the ability to **upload Microsoft Office or LibreOffice documents (like PowerPoint, Word, or Excel) directly onto the canvas.**\\n\\nHere\u2019s how it transforms a standard lesson:\\n\\n1.  An instructor uploads their existing PowerPoint presentation.\\n2.  plugNmeet automatically converts each slide into a high-resolution image and places it on the whiteboard, arranged in the correct page order.\\n3.  The instructor can then navigate through the slides with a simple next/previous page interface, just like in native presentation software. They can draw, annotate, and highlight key concepts directly on top of their slides, creating a much more engaging and dynamic presentation.\\n\\nBut it doesn\'t stop there. As a moderator, you have full classroom control. With a single click, you can switch to **multi-user drawing mode**, allowing students to collaboratively solve a problem, annotate a diagram, or brainstorm ideas directly on the shared canvas.\\n\\n### The Digital Scratchpad: Collaborative Note-Taking with the Shared Notepad\\n\\nComplementing the visual nature of the whiteboard is the **Shared Notepad**. Powered by the robust and proven **Etherpad-lite** engine, this tool provides a real-time, collaborative text editor within the meeting.\\n\\nIt\u2019s the perfect digital scratchpad for:\\n\\n*   Taking collective class notes that everyone can contribute to and save.\\n*   Brainstorming lists and ideas in a structured text format.\\n*   Sharing and collaboratively editing snippets of code or text.\\n\\nThe notepad provides a persistent space for text-based collaboration, ensuring that no ideas are lost.\\n\\n### The Engine Under the Hood: Secure, Scalable, and Fast\\n\\nThese collaborative features are not just bolted on; they are powered by a backend architecture designed for performance and security.\\n\\n*   **Instant Synchronization:** All whiteboard annotations\u2014every line, shape, and text box\u2014are synchronized across all participants in near real-time. This is made possible by our high-performance **NATS JetStream** messaging system, which ensures a smooth, lag-free experience.\\n\\n*   **Secure by Design:** This rapid synchronization works perfectly even with **End-to-End Encryption (E2EE) enabled** for the whiteboard. You can have a highly interactive and collaborative session with the peace of mind that all visual data is fully encrypted.\\n\\n*   **Scalable Foundation:** This architecture is designed to scale, ensuring these features work just as seamlessly with a large class as they do with a small group.\\n\\n*(Note: While the whiteboard supports E2EE, the Etherpad-lite engine for the shared notepad does not currently operate under the E2EE model.)*\\n\\n### A Native Moodle Experience\\n\\nThe best part is that all of this functionality is available as a **native Moodle activity**. Because plugNmeet is designed for deep integration, users never leave your Moodle site. There are no jarring redirects to an external URL; the entire virtual classroom loads directly within your course page, creating a truly seamless experience that feels like a natural part of your platform.\\n\\nThis is made possible by our unique architecture, which leverages an API like `getClientFiles`. Instead of trapping the classroom in a restrictive `<iframe>`, this API allows the Moodle plugin to load the client\'s components directly. This not only provides a native feel but also enables powerful, on-the-fly customization. From the Moodle plugin settings, you can instantly adjust brand colors and change logos, creating a fully white-labeled experience without ever touching a line of code or worrying about the underlying complexity. It reinforces your brand, simplifies the user journey, and keeps all learning activities tightly integrated within your platform.\\n\\n---\\n\\n### Conclusion: Build a Better Classroom\\n\\nBy combining Moodle with plugNmeet, you are not just adding a video link to your course; you are building a truly integrated, secure, and scalable e-learning platform. You are empowering your educators with tools that are far more engaging than passive screen sharing, fostering a new level of collaboration and interaction in the virtual classroom.\\n\\n---\\n\\n**Ready to build your next-generation e-learning platform?**\\n\\n*   **Learn more about our [Moodle Integration](/docs/user-guide/moodle-integration)**\\n*   **Try the whiteboard and other features in our [Live Demo](https://demo.plugnmeet.com/landing.html)**\\n*   **Explore our [Open-Source Project on GitHub](https://github.com/mynaparrot/plugNmeet-server)**"},{"id":"backend-architecture-deep-dive","metadata":{"permalink":"/blog/backend-architecture-deep-dive","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-27-backend-architecture-deep-dive.md","source":"@site/blog/2025-10-27-backend-architecture-deep-dive.md","title":"Why We Chose LiveKit and NATS: A Deep Dive into Our Backend Architecture","description":"Every great application is built on a foundation of smart architectural choices. For a real-time video conferencing platform, these choices are the difference between a smooth, reliable experience and a frustrating mess of lag, dropped calls, and connection errors.","date":"2025-10-27T00:00:00.000Z","tags":[{"inline":true,"label":"webrtc","permalink":"/blog/tags/webrtc"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"backend","permalink":"/blog/tags/backend"},{"inline":true,"label":"livekit","permalink":"/blog/tags/livekit"},{"inline":true,"label":"nats","permalink":"/blog/tags/nats"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"scalability","permalink":"/blog/tags/scalability"}],"readingTime":6.44,"hasTruncateMarker":true,"authors":[{"name":"Jibon L. Costa","title":"Founding developer","url":"https://github.com/jibon57","imageURL":"https://github.com/jibon57.png","key":"jibon","page":null}],"frontMatter":{"title":"Why We Chose LiveKit and NATS: A Deep Dive into Our Backend Architecture","slug":"backend-architecture-deep-dive","authors":["jibon"],"tags":["webrtc","architecture","backend","livekit","nats","open-source","scalability"]},"unlisted":false,"prevItem":{"title":"Building a Secure and Scalable E-Learning Platform with Plug-N-Meet and Moodle","permalink":"/blog/secure-scalable-moodle-e-learning-platform"},"nextItem":{"title":"How to Build Your Own Video Conferencing App in Under an Hour","permalink":"/blog/build-video-conferencing-app-in-under-an-hour"}},"content":"Every great application is built on a foundation of smart architectural choices. For a real-time video conferencing platform, these choices are the difference between a smooth, reliable experience and a frustrating mess of lag, dropped calls, and connection errors.\\n\\nWhen we designed plugNmeet, we had a clear set of goals: the platform needed to be high-performance, horizontally scalable, resilient, and easy for developers to build upon. This led us to make two fundamental decisions for our backend: we chose **LiveKit** for our media server and **NATS** for our real-time messaging layer.\\n\\nThis article is a deep dive into the \\"why\\" behind these critical choices.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n## The Two Pillars of Real-Time Communication\\n\\nAt its core, any serious video conferencing platform has to solve two distinct problems. But for a project like plugNmeet, it\'s not enough to just make them work. The solution must also be:\\n\\n*   **Easy to Scale:** Able to grow from handling a few dozen users to many thousands without a complete re-architecture.\\n*   **Highly Available:** Resilient to failure, ensuring that the loss of a single component doesn\'t bring the entire system down.\\n*   **Resource-Efficient & Cost-Effective:** Designed to run on reasonable hardware, keeping operational costs low for everyone.\\n*   **Easy to Manage:** Simple to deploy and maintain, even for small teams or individual developers.\\n\\nOur architectural philosophy was to choose a best-in-class open-source tool for each of the two main challenges\u2014**Media Routing** and **Signaling**\u2014that met all of these demanding criteria.\\n\\n1.  **Media Routing:** How do you efficiently get audio and video streams from each participant to every other participant?\\n2.  **Signaling & State Management:** How do you instantly deliver all the other real-time information that makes a meeting dynamic and interactive?\\n\\n## Pillar 1: LiveKit - The High-Performance Media Engine\\n\\nIn the early days of WebRTC, many apps used a peer-to-peer (P2P) mesh. This works for a 1-on-1 call, but it fails catastrophically as you add more people. Each participant has to upload their video stream separately to every other person, quickly overwhelming their internet connection.\\n\\nThe modern solution is a **Selective Forwarding Unit (SFU)**. An SFU is a server that acts as a traffic cop. Each participant sends their video stream to the SFU just *once*, and the SFU then forwards that stream to all other participants.\\n\\nFor our SFU, we chose **LiveKit**, and here\u2019s why:\\n\\n*   **High Performance & Efficiency:** LiveKit is written in Go, making it incredibly fast and resource-efficient. It can handle a large number of concurrent users and streams on a single server, which aligns with our goal of providing a cost-effective solution.\\n*   **Built-in Scalability:** LiveKit is designed to be clustered, and it uses Redis to manage state across multiple nodes. This provides a clear, documented path to the massive scale required by our largest users.\\n*   **Modern Features by Default:** LiveKit comes with critical, out-of-the-box support for modern WebRTC features like **Simulcast** (sending multiple quality streams) and **Dynacast** (intelligently pausing streams). This allows plugNmeet to automatically adapt to each user\'s network conditions, dramatically improving reliability.\\n*   **Secure and Open Source:** As an open-source project itself, LiveKit aligns with our core philosophy of transparency. It also has built-in support for passing through End-to-End Encrypted (E2EE) media, which is essential for our security model.\\n\\nIn short, by building on top of LiveKit, we didn\'t have to reinvent the wheel. We inherited a powerful, battle-tested media engine, allowing us to focus on building the application logic and features that make plugNmeet unique.\\n\\n## Pillar 2: NATS JetStream - The Resilient Nervous System\\n\\nWhile LiveKit handles the heavy media streams, we needed a separate, highly reliable system for all the other real-time data that makes a meeting interactive. This is where **NATS** comes in.\\n\\nMore specifically, we leverage **NATS JetStream**, the powerful persistence layer built into the NATS ecosystem. JetStream elevates NATS from a simple messaging system to a true streaming platform, which is critical for the reliability and scalability of our backend services.\\n\\nHere\u2019s why JetStream was the perfect choice for plugNmeet:\\n\\n*   **Multi-Layered Security:** NATS provides a robust, defense-in-depth security model at the messaging layer, which operates in addition to our application-level E2EE.\\n    *   **Encryption in Transit:** All connections from clients to the NATS cluster are secured using **TLS**. This encrypts all signaling data while it\'s on the wire, protecting it from eavesdropping.\\n    *   **Fine-Grained Authorization:** This is where the real power lies. When a user authenticates, the `plugnmeet-server` dynamically generates a unique set of permissions for that specific user session. These permissions strictly define which NATS subjects the user is allowed to publish to and subscribe from, typically scoped by `roomId` and `userId`. This enforces a true **principle of least privilege**, making it architecturally impossible for a user in one room to access data from another.\\n\\n*   **Scalable Request Processing with Queue Workers:** For critical client-server interactions, like fetching the initial user list, we leverage JetStream\'s powerful **queue worker pattern**. When a client sends a request, it\'s published to a stream. Our backend `plugnmeet-server` instances subscribe to this stream as a **queue group**, and NATS ensures that each request is delivered to only **one** available server. This provides automatic, built-in load balancing for our core application logic.\\n\\n*   **High-Performance Streaming for Real-Time Data:** For other real-time data like **chat messages** or **collaborative whiteboard** drawing data, we use JetStream\'s high-performance streaming capabilities to ensure fast and reliable delivery to all participants in a room.\\n\\n*   **Built for Resilience:** NATS is designed from the ground up for clustering and self-healing. If one NATS node fails, clients will automatically reconnect to another, ensuring the \\"nervous system\\" of your meetings stays online.\\n\\nBy using NATS for its deep security model, performance, and resilience, we built a backend that is fast, secure, and remarkably easy to scale.\\n\\n---\\n\\n## Conclusion: A Foundation Built for the Future\\n\\nThe choice of LiveKit and NATS JetStream was deliberate. By combining a best-in-class media server with a best-in-class streaming platform, we\'ve created a platform that is:\\n\\n*   **Performant:** Handling both media and signaling with specialized, high-speed tools.\\n*   **Scalable:** With clear, documented paths for clustering each component.\\n*   **Resilient:** With built-in failover and self-healing capabilities.\\n*   **Flexible:** Allowing us to build powerful, decoupled features like our auto-scaling recorders.\\n\\nBut there\'s one more crucial element that ties this all together: **the underlying technology**. Both LiveKit and NATS are written in **Go**, one of the most powerful languages for modern, concurrent network services. This was no accident. We deliberately chose to write the core `plugnmeet-server` in Go as well.\\n\\nThis creates a **unified, high-performance ecosystem**. Our developers can move seamlessly between components, leading to faster development cycles, easier maintenance, and a more cohesive and stable platform for our users. It means that when you build with plugNmeet, you\'re building on a consistent and coherent technology stack from top to bottom.\\n\\nThe ultimate benefit of this Go-based approach is in the final deployment. The entire `plugnmeet-server` compiles down to a **single, dependency-free binary file**. This makes deployment incredibly simple and portable. You can run it as a standalone service on a bare-metal server or package it into a minimal, highly secure Docker container. There are no language runtimes to manage and no complex dependencies to install\u2014just a single file that works.\\n\\nWhen you choose plugNmeet, you\'re not just getting an application. You\'re getting a thoughtfully designed architecture built on a foundation you can trust.\\n\\n---\\n**Want to learn more?**\\n\\n*   **Read our [Scalable Deployment Guide](/docs/developer-guide/scalable-setup)**\\n*   **Explore the [Open-Source Project on GitHub](https://github.com/mynaparrot/plugNmeet-server)**"},{"id":"build-video-conferencing-app-in-under-an-hour","metadata":{"permalink":"/blog/build-video-conferencing-app-in-under-an-hour","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","source":"@site/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","title":"How to Build Your Own Video Conferencing App in Under an Hour","description":"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize.","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":true,"label":"webrtc","permalink":"/blog/tags/webrtc"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":4.01,"hasTruncateMarker":true,"authors":[{"name":"Jibon L. Costa","title":"Founding developer","url":"https://github.com/jibon57","imageURL":"https://github.com/jibon57.png","key":"jibon","page":null}],"frontMatter":{"title":"How to Build Your Own Video Conferencing App in Under an Hour","slug":"build-video-conferencing-app-in-under-an-hour","authors":["jibon"],"tags":["webrtc","api","sdk","developer","tutorial","programming"]},"unlisted":false,"prevItem":{"title":"Why We Chose LiveKit and NATS: A Deep Dive into Our Backend Architecture","permalink":"/blog/backend-architecture-deep-dive"}},"content":"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize.\\n\\nBut what if you could skip all of that?\\n\\nWhat if you could leverage a powerful, open-source platform that handles all the backend complexity, allowing you to build a fully functional, custom-branded video conferencing app in under an hour? With **plugNmeet**, you can.\\n\\nThis guide will show you the three core steps to building your own video app using plugNmeet\'s API-first architecture.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n## The Old Way: The Mountain of Complexity\\n\\nBefore we show you the easy way, it\'s important to appreciate the problems plugNmeet solves. Building a WebRTC app from scratch requires you to become an expert in:\\n\\n1.  **Signaling:** Creating a system (usually with WebSockets) to coordinate connections between users.\\n2.  **NAT Traversal:** Setting up and managing STUN/TURN servers to allow users behind firewalls to connect to each other.\\n3.  **Media Server (SFU):** Deploying and scaling a Selective Forwarding Unit (like LiveKit, Mediasoup, or Janus) to efficiently route video and audio streams.\\n4.  **Backend Logic:** Writing an application server to manage rooms, users, and permissions.\\n5.  **Frontend UI:** Building a complete user interface from scratch to handle video elements, buttons, chat, and more.\\n\\nThis is a massive undertaking.\\n\\n## The plugNmeet Way: An API-First Framework\\n\\nplugNmeet bundles all of this complexity into a single, open-source server that you can install with an automated script. It provides you with a simple, powerful set of APIs that act as your building blocks.\\n\\nHere\'s how you build your app in three steps.\\n\\n### Step 1: Set Up the Backend (5 Minutes)\\n\\nFirst, you need the plugNmeet server, which includes LiveKit for media and NATS for messaging. You can install everything on a fresh Ubuntu server using our automated installation script.\\n\\n```bash\\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install.sh\\nchmod +x install.sh\\n./install.sh\\n```\\n\\nThat\'s it. You now have a production-ready media server and API endpoint. The script will provide you with your `API_KEY` and `API_SECRET`, which you\'ll need for the next step.\\n\\n### Step 2: Control the Backend with an API Call (10 Minutes)\\n\\nNext, you need to tell your backend to create a meeting room and generate a token for a user to join. This is done with a simple server-side API call.\\n\\nYou can use our official PHP SDK or JavaScript SDK, or call the API directly. Here\u2019s a simple example in PHP:\\n\\n```php\\n<?php\\nrequire __DIR__ . \\"/plugNmeetConnect.php\\";\\n\\n$config = new stdClass();\\n$config->plugnmeet_server_url = \\"https://demo.plugnmeet.com\\"; // Your server URL\\n$config->plugnmeet_api_key = \\"plugnmeet\\"; // Your API Key\\n$config->plugnmeet_secret = \\"zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6\\"; // Your API Secret\\n\\n$connect = new plugNmeetConnect($config);\\n\\n$roomId = \\"room01\\"; // Must be unique. You can also use $connect->getUUID();\\n$user_full_name = \\"John Doe\\";\\n$userId = \\"your-unique-user-id\\"; // Must be unique for each user.\\n\\n// Define all the features for this specific room.\\n$roomMetadata = array(\\n    \\"room_features\\" => array(\\n        \\"allow_webcams\\" => true,\\n        \\"mute_on_start\\" => false,\\n        \\"allow_screen_share\\" => true,\\n        \\"room_duration\\" => 0 // 0 = no limit\\n    ),\\n    // ... and many more options\\n);\\n$create = $connect->createRoom($roomId, \\"Test room\\", \\"Welcome to room\\", 0, \\"\\", $roomMetadata);\\n// $create->getStatus();\\n\\n$join = $connect->getJoinToken($roomId, $user_full_name, $userId, true);\\n// $join->getStatus();\\n\\n$url = $config->plugnmeet_server_url . \\"?access_token=\\" . $join->getToken();\\necho $url;\\n```\\n\\nThis script creates a room and gives you a unique URL with a token that grants \\"John Doe\\" access to that room. You can find full example of PHP from [PHP Quick Start](/docs/tutorials/quick_php)\\n\\n### Step 3: Display the Frontend (2 Minutes)\\n\\nNow for the final piece: the user interface. Do you need to build one from scratch? No.\\n\\nplugNmeet provides a complete, feature-rich, and customizable web client. You simply need to direct your user to the join URL generated in the previous step.\\n\\nThe join URL looks something like this:\\n`https://your-domain.com/login.html?access_token=YOUR_GENERATED_TOKEN`\\n\\nWhen a user visits this link, the plugNmeet client application loads, authenticates them with the token, and places them directly into the video meeting.\\n\\n---\\n\\n## Conclusion: You\'re a Video App Developer Now\\n\\nIn the time it took to read this article, you\'ve learned the entire workflow:\\n\\n1.  **Install a powerful backend** with a single command.\\n2.  **Use a simple API call** to control rooms and users.\\n3.  **Use the pre-built client** to provide an instant user interface.\\n\\nYou\'ve skipped the mountain of WebRTC complexity and gone straight to building your application. From here, you can use our **Design Customization** features to completely white-label the client, or use our webhooks to build complex business logic around your meetings.\\n\\nThe power of a complete WebRTC platform is now at your fingertips. What will you build?\\n\\n---\\n**Ready to get started?**\\n\\n*   **Follow the [Installation Guide](/docs/installation)**\\n*   **Explore the [API Documentation](/docs/api/intro)**"}]}}')}}]);