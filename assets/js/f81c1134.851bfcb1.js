"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"build-video-conferencing-app-in-under-an-hour","metadata":{"permalink":"/blog/build-video-conferencing-app-in-under-an-hour","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","source":"@site/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","title":"How to Build Your Own Video Conferencing App in Under an Hour","description":"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize.","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":true,"label":"webrtc","permalink":"/blog/tags/webrtc"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":3.83,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"How to Build Your Own Video Conferencing App in Under an Hour","slug":"build-video-conferencing-app-in-under-an-hour","tags":["webrtc","api","sdk","developer","tutorial","programming"]},"unlisted":false,"nextItem":{"title":"Building Our Own Home: Why the New plugNmeet Blog is Self-Hosted","permalink":"/blog/welcome-to-the-new-plugnmeet-blog"}},"content":"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize.\\n\\nBut what if you could skip all of that?\\n\\nWhat if you could leverage a powerful, open-source platform that handles all the backend complexity, allowing you to build a fully functional, custom-branded video conferencing app in under an hour? With **plugNmeet**, you can.\\n\\nThis guide will show you the three core steps to building your own video app using plugNmeet\'s API-first architecture.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n## The Old Way: The Mountain of Complexity\\n\\nBefore we show you the easy way, it\'s important to appreciate the problems plugNmeet solves. Building a WebRTC app from scratch requires you to become an expert in:\\n\\n1.  **Signaling:** Creating a system (usually with WebSockets) to coordinate connections between users.\\n2.  **NAT Traversal:** Setting up and managing STUN/TURN servers to allow users behind firewalls to connect to each other.\\n3.  **Media Server (SFU):** Deploying and scaling a Selective Forwarding Unit (like LiveKit, Mediasoup, or Janus) to efficiently route video and audio streams.\\n4.  **Backend Logic:** Writing an application server to manage rooms, users, and permissions.\\n5.  **Frontend UI:** Building a complete user interface from scratch to handle video elements, buttons, chat, and more.\\n\\nThis is a massive undertaking.\\n\\n## The plugNmeet Way: An API-First Framework\\n\\nplugNmeet bundles all of this complexity into a single, open-source server that you can install with an automated script. It provides you with a simple, powerful set of APIs that act as your building blocks.\\n\\nHere\'s how you build your app in three steps.\\n\\n### Step 1: Set Up the Backend (5 Minutes)\\n\\nFirst, you need the plugNmeet server, which includes LiveKit for media and NATS for messaging. You can install everything on a fresh Ubuntu server using our automated installation script.\\n\\n```bash\\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install.sh\\nchmod +x install.sh\\n./install.sh\\n```\\n\\nThat\'s it. You now have a production-ready media server and API endpoint. The script will provide you with your `API_KEY` and `API_SECRET`, which you\'ll need for the next step.\\n\\n### Step 2: Control the Backend with an API Call (10 Minutes)\\n\\nNext, you need to tell your backend to create a meeting room and generate a token for a user to join. This is done with a simple server-side API call.\\n\\nYou can use our official PHP SDK or JavaScript SDK, or call the API directly. Here\u2019s a simple example in PHP:\\n\\n```php\\n<?php\\nrequire_once \'vendor/autoload.php\'; // Assuming you\'ve installed the SDK via Composer\\n\\nuse PlugNmeet\\\\auth\\\\Auth;\\nuse PlugNmeet\\\\plugNmeet;\\n\\n// Your API credentials from the server installation\\n$apiKey = \'plugnmeet\';\\n$apiSecret = \'zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6\';\\n$host = \'https://demo.plugnmeet.com\'; // Replace with your server URL\\n\\n$auth = new Auth($apiKey, $apiSecret);\\n$plugNmeet = new plugNmeet($host, $auth);\\n\\n// 1. Create a new room\\n$room = $plugNmeet->room()->createRoom([\\n    \'room_id\' => \'test-room-123\',\\n    \'max_participants\' => 20,\\n]);\\n\\n// 2. Generate a join token for a user\\n$token = $plugNmeet->auth()->getJoinToken([\\n    \'room_id\' => \'test-room-123\',\\n    \'user_info\' => [\\n        \'name\' => \'John Doe\',\\n        \'user_id\' => \'user-id-001\',\\n        \'is_admin\' => true,\\n    ],\\n]);\\n\\necho $token;\\n?>\\n```\\n\\nThis script creates a room and gives you a unique URL with a token that grants \\"John Doe\\" access to that room.\\n\\n### Step 3: Display the Frontend (2 Minutes)\\n\\nNow for the final piece: the user interface. Do you need to build one from scratch? No.\\n\\nplugNmeet provides a complete, feature-rich, and customizable web client. You simply need to direct your user to the join URL generated in the previous step.\\n\\nThe join URL looks something like this:\\n`https://your-domain.com/login.html?access_token=YOUR_GENERATED_TOKEN`\\n\\nWhen a user visits this link, the plugNmeet client application loads, authenticates them with the token, and places them directly into the video meeting.\\n\\n---\\n\\n## Conclusion: You\'re a Video App Developer Now\\n\\nIn the time it took to read this article, you\'ve learned the entire workflow:\\n\\n1.  **Install a powerful backend** with a single command.\\n2.  **Use a simple API call** to control rooms and users.\\n3.  **Use the pre-built client** to provide an instant user interface.\\n\\nYou\'ve skipped the mountain of WebRTC complexity and gone straight to building your application. From here, you can use our **Design Customization** features to completely white-label the client, or use our webhooks to build complex business logic around your meetings.\\n\\nThe power of a complete WebRTC platform is now at your fingertips. What will you build?\\n\\n---\\n**Ready to get started?**\\n\\n*   **Follow the [Installation Guide](/docs/installation)**\\n*   **Explore the [API Documentation](/docs/api/intro)**"},{"id":"welcome-to-the-new-plugnmeet-blog","metadata":{"permalink":"/blog/welcome-to-the-new-plugnmeet-blog","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-26-welcome-to-out-new-blog.md","source":"@site/blog/2025-10-26-welcome-to-out-new-blog.md","title":"Building Our Own Home: Why the New plugNmeet Blog is Self-Hosted","description":"Today marks a new chapter for the plugNmeet project. We are incredibly excited to launch our new, official blog, right here on our own domain: plugnmeet.org.","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":true,"label":"plugnmeet","permalink":"/blog/tags/plugnmeet"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"self-hosting","permalink":"/blog/tags/self-hosting"},{"inline":true,"label":"meta","permalink":"/blog/tags/meta"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.57,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Building Our Own Home: Why the New plugNmeet Blog is Self-Hosted","slug":"welcome-to-the-new-plugnmeet-blog","tags":["plugnmeet","open-source","self-hosting","meta","announcement"]},"unlisted":false,"prevItem":{"title":"How to Build Your Own Video Conferencing App in Under an Hour","permalink":"/blog/build-video-conferencing-app-in-under-an-hour"}},"content":"Today marks a new chapter for the plugNmeet project. We are incredibly excited to launch our new, official blog, right here on our own domain: `plugnmeet.org`.\\n\\nFor those of you who have followed us on Medium, thank you. Your support has been invaluable. But as our community has grown, we knew it was time to build our own home\u2014a space that truly reflects the values of our project.\\n\\n\x3c!--truncate--\x3e\\n\\nThe decision to move our blog wasn\'t just about having a new design. It was about philosophy.\\n\\n### Why We Moved: Practicing What We Preach\\n\\nThe core promise of plugNmeet is simple: **you should be in control.**\\n\\nWe built plugNmeet because we believe that your conversations are too important to be entrusted to a third-party platform. You should own your data, control your brand, and manage your own infrastructure. We provide the tools for you to build your own private, powerful communication platform.\\n\\nSo, it was only natural that we apply the same principle to our own content.\\n\\nPublishing on a third-party platform like Medium is convenient, but it means you are building your house on someone else\'s land. The platform controls the experience, owns the relationship with your audience, and ultimately benefits the most from the value you create.\\n\\nWe decided it was time to own our content, just as we empower you to own your conversations. By moving our blog to our own self-hosted Docusaurus site, we are:\\n\\n1.  **Consolidating Our SEO:** All the authority we build now flows directly to `plugnmeet.org`, making our project\'s home the definitive source of truth.\\n2.  **Owning Our Brand:** The look, feel, and user experience are now 100% ours, creating a seamless journey from our blog to our documentation.\\n3.  **Living Our Philosophy:** We are demonstrating the power and importance of self-hosting in a real, tangible way.\\n\\n### What to Expect from This Blog\\n\\nThis new space will be the heart of the plugNmeet community and knowledge base. It\'s where we will share not just announcements, but deep, valuable content designed to help you succeed. Expect to see:\\n\\n*   **Technical Deep Dives:** Detailed articles on our architecture, from our pragmatic approach to scaling to the specifics of our security model.\\n*   **Practical Guides & Case Studies:** Real-world examples of how businesses, educators, and developers are using plugNmeet to solve their communication challenges.\\n*   **Product Updates:** The latest news on new features, releases, and the future roadmap of the project.\\n\\nOur goal is to create a resource that is as powerful and flexible as the platform itself.\\n\\n### Join Us on the Journey\\n\\nThank you for being a part of the plugNmeet community. This new blog is for you, and we\'re excited to start this next chapter together. We believe in a future where everyone has the power to create their own private, secure, and branded spaces for communication.\\n\\nWelcome to our new home.\\n\\n---\\n\\n**Ready to take control of your own conversations?**\\n\\n*   **Explore the Open-Source Project on [GitHub](https://github.com/mynaparrot/plugNmeet-server)**\\n*   **Read Our Comprehensive [Security Overview](/docs/security-overview)**\\n*   **Try the [Live Demo](https://demo.plugnmeet.com/landing.html)**"}]}}')}}]);