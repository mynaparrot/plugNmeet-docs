"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[656],{9724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/intro","title":"API Reference Introduction | plugNmeet Developer Docs","description":"An introduction to the plugNmeet API. Learn how to authenticate, make requests, and use our powerful endpoints to build custom video applications.","source":"@site/docs/api/intro.md","sourceDirName":"api","slug":"/api/intro","permalink":"/docs/api/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/docs/api/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"API Reference Introduction | plugNmeet Developer Docs","description":"An introduction to the plugNmeet API. Learn how to authenticate, make requests, and use our powerful endpoints to build custom video applications.","keywords":["api","rest api","developer","sdk","authentication","api key","endpoints","webhook"],"sidebar_position":1,"sidebar_label":"Intro"},"sidebar":"tutorialSidebar","previous":{"title":"Migrating from BigBlueButton","permalink":"/docs/tutorials/migration-from-bbb"},"next":{"title":"Create","permalink":"/docs/api/room/create"}}');var r=t(5813),i=t(5880);const o={title:"API Reference Introduction | plugNmeet Developer Docs",description:"An introduction to the plugNmeet API. Learn how to authenticate, make requests, and use our powerful endpoints to build custom video applications.",keywords:["api","rest api","developer","sdk","authentication","api key","endpoints","webhook"],sidebar_position:1,sidebar_label:"Intro"},a="Introduction",c={},l=[{value:"Endpoint Structure",id:"endpoint-structure",level:3},{value:"Authentication Headers",id:"authentication-headers",level:3},{value:"Generating the HASH-SIGNATURE",id:"generating-the-hash-signature",level:2},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Shell with cURL",id:"shell-with-curl",level:3},{value:"PHP",id:"php",level:3},{value:"NodeJS",id:"nodejs",level:3},{value:"TypeScript (Node.js built-in crypto)",id:"typescript-nodejs-built-in-crypto",level:3},{value:"Go",id:"go",level:3},{value:"Python",id:"python",level:3},{value:"Java",id:"java",level:3},{value:"Ruby",id:"ruby",level:3},{value:"SDKs",id:"sdks",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsx)(n.p,{children:"Plug-N-Meet provides a secure API for interacting with your server. All authenticated API requests share a common base path."}),"\n",(0,r.jsx)(n.h3,{id:"endpoint-structure",children:"Endpoint Structure"}),"\n",(0,r.jsxs)(n.p,{children:["To use the API, you will send a ",(0,r.jsx)(n.code,{children:"POST"})," request to an endpoint that starts with your server's URL followed by the ",(0,r.jsx)(n.code,{children:"/auth"})," path. The specific API method path is then appended to it."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Base authenticated API path:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://plugnmeet.example.com/auth\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For example, if you are calling the ",(0,r.jsx)(n.code,{children:"/room/getActiveRoomInfo"})," method, the full endpoint URL would be:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://plugnmeet.example.com/auth/room/getActiveRoomInfo\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All API calls must be ",(0,r.jsx)(n.code,{children:"POST"})," requests with a JSON body."]}),"\n",(0,r.jsx)(n.h3,{id:"authentication-headers",children:"Authentication Headers"}),"\n",(0,r.jsx)(n.p,{children:"All requests to these endpoints must include the following headers for authentication:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"API-KEY"})}),": Your Plug-N-Meet Server API Key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"HASH-SIGNATURE"})}),": An HMAC SHA256 signature (in hex format) of the raw JSON request body, generated using your API Secret as the key."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Content-Type"})}),": ",(0,r.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"generating-the-hash-signature",children:"Generating the HASH-SIGNATURE"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"HASH-SIGNATURE"})," is the core of the authentication process. It proves that the request is coming from a trusted source and that the message body has not been tampered with. It is a standard HMAC (Hash-based Message Authentication Code) signature."]}),"\n",(0,r.jsx)(n.p,{children:"Here is the language-agnostic process to generate it:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Get the Raw Request Body"}),": Start with the complete JSON request body as a single, raw string. It is crucial that this string is exactly what will be sent in the ",(0,r.jsx)(n.code,{children:"POST"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Select the Algorithm"}),": Use the ",(0,r.jsx)(n.strong,{children:"HMAC-SHA256"})," algorithm. This is a standard function available in the cryptography or hashing library of almost any programming language."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Your Secret Key"}),': The "key" for the HMAC function is your ',(0,r.jsx)(n.strong,{children:"API Secret"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compute the Hash"}),": Pass the raw request body string and your API Secret to the HMAC-SHA256 function."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encode the Result"}),": The output of the HMAC function is a binary hash. You must convert this binary value into its ",(0,r.jsx)(n.strong,{children:"lowercase hexadecimal representation"}),". This final hex string is the value for your ",(0,r.jsx)(n.code,{children:"HASH-SIGNATURE"})," header."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By following these steps, you can generate a valid signature in any language, ensuring secure communication with the API."}),"\n",(0,r.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,r.jsx)(n.p,{children:"The following examples demonstrate how to implement the signature generation process in various popular languages."}),"\n",(0,r.jsx)(n.h3,{id:"shell-with-curl",children:"Shell with cURL"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the entire process using command-line tools. It shows how to construct the headers and body, generate the signature, and send the request."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# 1. The raw JSON body as a string\nBODY=\'{"room_id":"room01"}\'\n\n# Your API credentials\nAPI_KEY="plugnmeet"\nSECRET="zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6"\n\n# 2. Generate the HMAC-SHA256 signature and encode it in hex\n#    (This command performs steps 2-5 from the process above)\nSIGNATURE=$(echo -n "$BODY" | openssl dgst -sha256 -mac HMAC -macopt key:"$SECRET" | awk \'{print $2}\')\n\n# 3. Make the POST request with the correct headers and body\ncurl -X POST https://demo.plugnmeet.com/auth/room/getActiveRoomInfo \\\n  -H "Content-Type: application/json" \\\n  -H "API-KEY: $API_KEY" \\\n  -H "HASH-SIGNATURE: $SIGNATURE" \\\n  -d "$BODY"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"php",children:"PHP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'$body = json_encode([\n    "room_id" => "room01",\n]);\n$signature = hash_hmac("sha256", $body, "SECRET");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodejs",children:"NodeJS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// using CryptoJS library\nconst body = JSON.stringify({ room_id: "room01" });\nconst hash = CryptoJS.HmacSHA256(body, "SECRET");\nconst signature = CryptoJS.enc.Hex.stringify(hash);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"typescript-nodejs-built-in-crypto",children:"TypeScript (Node.js built-in crypto)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { createHmac } from \'crypto\';\n\nconst body = JSON.stringify({ room_id: "room01" });\nconst signature = createHmac("sha256", "SECRET")\n    .update(body)\n    .digest("hex");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"go",children:"Go"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'const body = `{"room_id":"room01"}`\nmac := hmac.New(sha256.New, []byte("SECRET"))\nmac.Write([]byte(body))\nsignature := hex.EncodeToString(mac.Sum(nil))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import hmac\nimport hashlib\n\nbody = '{\"room_id\":\"room01\"}'\nsecret = b'SECRET'\nsignature = hmac.new(secret, body.encode(), hashlib.sha256).hexdigest()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\n\nString body = "{\\"room_id\\":\\"room01\\"}";\nString secret = "SECRET";\nMac sha256_HMAC = Mac.getInstance("HmacSHA256");\nSecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), "HmacSHA256");\nsha256_HMAC.init(secret_key);\nString signature = javax.xml.bind.DatatypeConverter.printHexBinary(sha256_HMAC.doFinal(body.getBytes())).toLowerCase();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ruby",children:"Ruby"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\nbody = '{\"room_id\":\"room01\"}'\nsecret = 'SECRET'\n\ndigest = OpenSSL::Digest.new('sha256')\nsignature = OpenSSL::HMAC.hexdigest(digest, secret, body)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sdks",children:"SDKs"}),"\n",(0,r.jsx)(n.p,{children:"For an even easier integration, you can use the following ready-to-use SDKs which handle the authentication process for you:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/mynaparrot/plugNmeet-sdk-php",children:"PHP"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/mynaparrot/plugNmeet-sdk-js",children:"JavaScript"})," (",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/plugnmeet-sdk-js",children:"NodeJS"})," & ",(0,r.jsx)(n.a,{href:"https://deno.land/x/plugnmeet",children:"Deno"}),")"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5880:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(9729);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);