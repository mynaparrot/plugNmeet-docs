"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[151],{1785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorials/quick_php","title":"PHP Quick Start: Create and Join a Meeting","description":"A step-by-step PHP quick start guide to create a video conference room and generate a secure join token using the Plug-N-Meet PHP SDK.","source":"@site/docs/tutorials/quick_php.md","sourceDirName":"tutorials","slug":"/tutorials/quick_php","permalink":"/docs/tutorials/quick_php","draft":false,"unlisted":false,"editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/docs/tutorials/quick_php.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"A step-by-step PHP quick start guide to create a video conference room and generate a secure join token using the Plug-N-Meet PHP SDK.","sidebar_position":1,"sidebar_label":"PHP Quick Start"},"sidebar":"tutorialSidebar","previous":{"title":"Scalable/Distributed setup","permalink":"/docs/developer-guide/scalable-setup"},"next":{"title":"Migrating from BigBlueButton","permalink":"/docs/tutorials/migration-from-bbb"}}');var r=n(5813),a=n(5880);const s={description:"A step-by-step PHP quick start guide to create a video conference room and generate a secure join token using the Plug-N-Meet PHP SDK.",sidebar_position:1,sidebar_label:"PHP Quick Start"},i="PHP Quick Start: Create and Join a Meeting",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Setup &amp; Configuration",id:"step-1-setup--configuration",level:2},{value:"Step 2: Define Room &amp; User Parameters",id:"step-2-define-room--user-parameters",level:2},{value:"Step 3: The Logic Flow - Check, Create, Join",id:"step-3-the-logic-flow---check-create-join",level:2},{value:"3.1 Check if the Room is Active",id:"31-check-if-the-room-is-active",level:3},{value:"3.2 If Not, Create the Room",id:"32-if-not-create-the-room",level:3},{value:"3.3 Generate the Join Token",id:"33-generate-the-join-token",level:3},{value:"Step 4: Redirecting the User",id:"step-4-redirecting-the-user",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"php-quick-start-create-and-join-a-meeting",children:"PHP Quick Start: Create and Join a Meeting"})}),"\n",(0,r.jsxs)(t.p,{children:["This tutorial provides a complete, step-by-step example of how to use the ",(0,r.jsx)(t.code,{children:"plugNmeet-sdk-php"})," library to create a new meeting room and generate a secure join token for a user."]}),"\n",(0,r.jsx)(t.p,{children:"The logic follows a common workflow: check if a room exists, create it if it doesn't, and then generate a URL for a user to join."}),"\n",(0,r.jsx)("img",{src:"/img/tutorials/quick_join_flow.png",width:"400",alt:"Quick Join Logic Flow",loading:"lazy"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(t.p,{children:"Before you begin, ensure you have the following:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A working PlugNmeet server with your API Key and Secret."}),"\n",(0,r.jsxs)(t.li,{children:["The latest version of the ",(0,r.jsx)(t.a,{href:"https://github.com/mynaparrot/plugNmeet-sdk-php/releases",children:"plugNmeet-sdk-php"})," library downloaded."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"step-1-setup--configuration",children:"Step 1: Setup & Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["First, create a PHP file (e.g., ",(0,r.jsx)(t.code,{children:"quickJoin.php"}),") and include the ",(0,r.jsx)(t.code,{children:"plugNmeetConnect.php"})," class from the SDK. Then, create a configuration object with your server details."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'<?php\nrequire __DIR__ . "/plugNmeetConnect.php";\n\n// Step 1: Configuration\n$config = new stdClass();\n$config->plugnmeet_server_url = "http://localhost:8080"; // Your server URL\n$config->plugnmeet_api_key = "plugnmeet"; // Your API Key\n$config->plugnmeet_secret = "zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6"; // Your API Secret\n\n$connect = new plugNmeetConnect($config);\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"step-2-define-room--user-parameters",children:"Step 2: Define Room & User Parameters"}),"\n",(0,r.jsxs)(t.p,{children:["Next, define the basic parameters for the room you want to create and the user who will be joining. The ",(0,r.jsx)(t.code,{children:"$roomMetadata"})," array allows you to customize every aspect of the room's features, from enabling webcams to setting default lock permissions."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'// Step 2: Room and User definitions\n$roomId = "room01"; // Must be unique. You can also use $connect->getUUID();\n$user_full_name = "Your Name";\n$userId = "your-unique-user-id"; // Must be unique for each user.\n\n// Define all the features for this specific room.\n$roomMetadata = array(\n    "room_features" => array(\n        "allow_webcams" => true,\n        "mute_on_start" => false,\n        "allow_screen_share" => true,\n        "room_duration" => 0 // 0 = no limit\n    ),\n    // ... and many more options\n);\n'})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"View Full Room Metadata Options"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'$roomMetadata = array(\n    "room_features" => array(\n        "allow_webcams" => true,\n        "mute_on_start" => false,\n        "allow_screen_share" => true,\n        "allow_rtmp" => true,\n        "allow_view_other_webcams" => true,\n        "allow_view_other_users_list" => true,\n        "admin_only_webcams" => false,\n        "enable_analytics" => true,\n        "allow_virtual_bg" => true,\n        "allow_raise_hand" => true,\n        "room_duration" => 0 // in minutes. 0 = no limit/unlimited\n    ),\n    "recording_features" => array(\n        "is_allow" => true,\n        "is_allow_cloud" => true,\n        "is_allow_local" => true,\n        "enable_auto_cloud_recording" => false\n    ),\n    "chat_features" => array(\n        "allow_chat" => true,\n        "allow_file_upload" => true\n    ),\n    "shared_note_pad_features" => array(\n        "allowed_shared_note_pad" => true\n    ),\n    "whiteboard_features" => array(\n        "allowed_whiteboard" => true,\n        //"preload_file" => "https://mydomain.com/text_book.pdf"\n    ),\n    "external_media_player_features" => array(\n        "allowed_external_media_player" => true\n    ),\n    "waiting_room_features" => array(\n        "is_active" => false,\n    ),\n    "breakout_room_features" => array(\n        "is_allow" => true,\n        "allowed_number_rooms" => 2\n    ),\n    "display_external_link_features" => array(\n        "is_allow" => true,\n    ),\n    "ingress_features" => array(\n        "is_allow" => true,\n    ),\n    "speech_to_text_translation_features" => array(\n        "is_allow" => true,\n        "is_allow_translation" => true,\n    ),\n    "end_to_end_encryption_features" => array(\n        "is_enabled" => false,\n    ),\n    "default_lock_settings" => array(\n        "lock_microphone" => false,\n        "lock_webcam" => false,\n        "lock_screen_sharing" => true,\n        "lock_whiteboard" => true,\n        "lock_shared_notepad" => true,\n        "lock_chat" => false,\n        "lock_chat_send_message" => false,\n        "lock_chat_file_share" => false,\n        "lock_private_chat" => false // user can always send private message to moderator\n    )\n);\n'})})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"step-3-the-logic-flow---check-create-join",children:"Step 3: The Logic Flow - Check, Create, Join"}),"\n",(0,r.jsx)(t.p,{children:"The following code blocks implement the core logic."}),"\n",(0,r.jsx)(t.h3,{id:"31-check-if-the-room-is-active",children:"3.1 Check if the Room is Active"}),"\n",(0,r.jsxs)(t.p,{children:["First, we call the API to see if a room with the specified ",(0,r.jsx)(t.code,{children:"$roomId"})," already exists and is active."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"$isRoomActive = false;\n$output = new stdClass();\n$output->status = false;\n\ntry {\n    // Check if the room already exists on the server\n    $res = $connect->isRoomActive($roomId);\n    if (!$res->getStatus()) {\n        $output->msg = $res->getResponseMsg();\n    } else {\n        $isRoomActive = $res->isActive();\n        $output->status = true;\n    }\n} catch (Exception $e) {\n    $output->msg = $e->getMessage();\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"32-if-not-create-the-room",children:"3.2 If Not, Create the Room"}),"\n",(0,r.jsx)(t.p,{children:"If the room is not active, we proceed to create it using the parameters we defined earlier."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'if (!$isRoomActive && $output->status) {\n    try {\n        // The room doesn\'t exist, so we create it now.\n        $create = $connect->createRoom($roomId, "Test room", "Welcome to room", 0, "", $roomMetadata);\n\n        $isRoomActive = $create->getStatus();\n        $output->status = $create->getStatus();\n        $output->msg = $create->getResponseMsg();\n    } catch (Exception $e) {\n        $output->msg = $e->getMessage();\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"33-generate-the-join-token",children:"3.3 Generate the Join Token"}),"\n",(0,r.jsx)(t.p,{children:"Once we have confirmed the room is active (either because it already existed or we just created it), we can generate a secure, single-use join token for our user."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'if ($isRoomActive && $output->status) {\n    try {\n        // The room is active, now we can generate a join token.\n        $join = $connect->getJoinToken($roomId, $user_full_name, $userId, true);\n\n        $output->url = $config->plugnmeet_server_url . "?access_token=" . $join->getToken();\n        $output->status = $join->getStatus();\n        $output->msg = $join->getResponseMsg();\n    } catch (Exception $e) {\n        $output->msg = $e->getMessage();\n    }\n}\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"step-4-redirecting-the-user",children:"Step 4: Redirecting the User"}),"\n",(0,r.jsxs)(t.p,{children:["After successfully generating the join token, the complete meeting URL will be in the ",(0,r.jsx)(t.code,{children:"$output->url"})," variable. You can now redirect your user to this URL to join the meeting."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'if ($output->status) {\n    header("Location: " . $output->url);\n    exit;\n} else {\n    echo $output->msg;\n}\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.p,{children:["This quick start guide uses the simplest method to get a user into a room. For a more deeply integrated experience, you can build a custom client interface using the ",(0,r.jsx)(t.a,{href:"/docs/api/get-client-files",children:"getClientFiles()"})," API method. This allows you to host the client on your own page without using an iframe."]}),"\n",(0,r.jsxs)(t.p,{children:["See the ",(0,r.jsx)(t.a,{href:"https://github.com/mynaparrot/plugNmeet-sdk-php/blob/main/examples/conference.php",children:"conference.php"})," file in our PHP-SDK for a complete example."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},5880:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(9729);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);