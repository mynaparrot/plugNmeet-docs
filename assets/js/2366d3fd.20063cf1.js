"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[881],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:2},o="Ports & firewall",i={unversionedId:"firewall",id:"firewall",title:"Ports & firewall",description:"To communicate with clients, plugNmeet and LiveKit use several ports. Before installing plugNmeet, ensure that those ports are not blocked by your firewall.",source:"@site/docs/firewall.md",sourceDirName:".",slug:"/firewall",permalink:"/docs/firewall",draft:!1,editUrl:"https://github.com/mynaparrot/plugNmeet-docs/docs/firewall.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"Installation",permalink:"/docs/installation"}},s={},p=[{value:"Ports",id:"ports",level:2},{value:"Testing the firewall",id:"testing-the-firewall",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ports--firewall"},"Ports & firewall"),(0,a.kt)("p",null,"To communicate with clients, plugNmeet and LiveKit use several ports. Before installing ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet"),", ensure that those ports are not blocked by your firewall."),(0,a.kt)("h2",{id:"ports"},"Ports"),(0,a.kt)("p",null,"When installing plugNmeet behind a firewall, make sure the following ports are open:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Port"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"80"),(0,a.kt)("td",{parentName:"tr",align:null},"TCP"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Usually required when issuing an SSL certificate with Let's Encrypt.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"443"),(0,a.kt)("td",{parentName:"tr",align:null},"TCP"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The primary HTTPS port for communicating with haproxy. Haproxy will interact with other services.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"7881"),(0,a.kt)("td",{parentName:"tr",align:null},"TCP"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Used when the client could not connect via UDP (e.g. VPN, corporate firewalls)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"50000-60000"),(0,a.kt)("td",{parentName:"tr",align:null},"UDP"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"left"},"LiveKit advertises these ports as WebRTC host candidates (each participant in the room will use two ports)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"443"),(0,a.kt)("td",{parentName:"tr",align:null},"UDP"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Optional")))),(0,a.kt)("h2",{id:"testing-the-firewall"},"Testing the firewall"),(0,a.kt)("p",null,"After you have made the changes to you firewall settings, before proceeding to the installation, take a moment and test that you have configured the firewall correctly."),(0,a.kt)("p",null,"To test connections on various ports needed by plugNmeet, you will use a tool called ",(0,a.kt)("inlineCode",{parentName:"p"},"netcat")," to listen for connections. You\u2019ll use ",(0,a.kt)("inlineCode",{parentName:"p"},"netcat")," on the plugNmeet server and on external server (outside the firewall) to generate connections. If the connections test fails, the firewall configuration is incorrect."),(0,a.kt)("p",null,"First, install ",(0,a.kt)("inlineCode",{parentName:"p"},"netcat")," on the plugNmeet server using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install netcat\n")),(0,a.kt)("p",null,"If you've already installed plugNmeet server using the installation script, you'll need to stop haproxy and plugnmeet server before testing. Otherwise ports will be keep using."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl stop plugnmeet\nsystemctl stop haproxy\n")),(0,a.kt)("p",null,"We can now run netcat to listen on ports and try connecting from an external computer. As root, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc -l 80\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"netcat")," is now going to echo to the terminal any text it receives on port 80 (you can quit the command later using Ctrl/Control + c)."),(0,a.kt)("p",null,"Next, on a second computer that is outside of the firewall, it must go through the firewall to access the plugNmeet server \u2013 install ",(0,a.kt)("inlineCode",{parentName:"p"},"netcat")," as well. If you're using ",(0,a.kt)("strong",{parentName:"p"},"Windows"),", you can get netcat ",(0,a.kt)("a",{parentName:"p",href:"https://eternallybored.org/misc/netcat/"},"here"),". Replace YOUR_SERVER_IP with your plugNmeet domain or IP address of your plugNmeet server, run the following command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc YOUR_SERVER_IP 80\n")),(0,a.kt)("p",null,"and type type the word ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," and press ENTER. If the firewall is forwarding incoming connections on port 80 to the internal plugNmeet server, you should see the word ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," appear after the ",(0,a.kt)("inlineCode",{parentName:"p"},"nc -l 80")," command, as in"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc -l 80\ntest\n")),(0,a.kt)("p",null,"If the word ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," does not appear, double-check the firewall configuration to ensure its forwarding connections on port 80 and then test again."),(0,a.kt)("p",null,"Repeat these tests with port ",(0,a.kt)("inlineCode",{parentName:"p"},"443")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"7881"),". That covers the TCP ports."),(0,a.kt)("p",null,"Next, we need to test that UDP connections in the range 50000-60000 are forwarded as well. On your plugNmeet server, run the following netcat command to listen for incoming data via UDP on port 50008 (here, we\u2019re picking a port in the range 50000-60000)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc -u -l 50008\n")),(0,a.kt)("p",null,"Again, on a computer outside the firewall, replace YOUR_SERVER_IP your plugNmeet domain or IP address of your plugNmeet server and run the command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc -u YOUR_SERVER_IP 50008\n")),(0,a.kt)("p",null,"Type ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," into the terminal and press ENTER. You should see the word test appear on the terminal of the plugNmeet server, as in"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nc -u -l 50008\ntest\n")),(0,a.kt)("p",null,"As before, if the above test fails, double-check the settings of the firewall to ensure its properly forwarding UDP packets in the range 50000-60000 and test again."))}c.isMDXComponent=!0}}]);