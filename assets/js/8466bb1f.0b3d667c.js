"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[8182],{9885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"developer-guide/setup-development","title":"Development Environment Setup | plugNmeet Developer Guide","description":"A guide to setting up a complete local development environment for contributing to the plugNmeet open-source project.","source":"@site/docs/developer-guide/setup-development.md","sourceDirName":"developer-guide","slug":"/developer-guide/setup-development","permalink":"/docs/developer-guide/setup-development","draft":false,"unlisted":false,"editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/docs/developer-guide/setup-development.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"A guide to setting up a complete local development environment for contributing to the plugNmeet open-source project.","title":"Development Environment Setup | plugNmeet Developer Guide","keywords":["contribute","development setup","local environment","plugnmeet development","docker","nodejs","pnpm","developer guide"],"sidebar_position":2,"sidebar_label":"Development Setup"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/developer-guide/intro"},"next":{"title":"Design Customization","permalink":"/docs/developer-guide/design-customisation"}}');var r=t(7259),i=t(4482);const s={description:"A guide to setting up a complete local development environment for contributing to the plugNmeet open-source project.",title:"Development Environment Setup | plugNmeet Developer Guide",keywords:["contribute","development setup","local environment","plugnmeet development","docker","nodejs","pnpm","developer guide"],sidebar_position:2,sidebar_label:"Development Setup"},l="Setting Up Your Development Environment",c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Clone the Repositories",id:"step-1-clone-the-repositories",level:2},{value:"Step 2: Configure and Run the Backend Server",id:"step-2-configure-and-run-the-backend-server",level:2},{value:"Step 3: Configure and Run the Front-End Client",id:"step-3-configure-and-run-the-front-end-client",level:2},{value:"Step 4: (Optional) Run the Recorder Service",id:"step-4-optional-run-the-recorder-service",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;I can&#39;t connect to the meeting room.&quot;",id:"i-cant-connect-to-the-meeting-room",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setting-up-your-development-environment",children:"Setting Up Your Development Environment"})}),"\n",(0,r.jsx)(n.p,{children:"Welcome to the plugNmeet development guide! We're excited that you're interested in contributing. This guide will walk you through setting up a complete local development environment, allowing you to run the entire plugNmeet stack on your own machine."}),"\n",(0,r.jsx)(n.p,{children:"Following these steps will enable you to test new features, fix bugs, and see your changes in real-time."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before you begin, please ensure you have the following software installed on your computer:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker"}),": Used to run the backend services (like LiveKit and NATS) in isolated containers, which simplifies the setup process significantly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js"}),": Required for running and developing the ",(0,r.jsx)(n.code,{children:"plugNmeet-client"}),". We recommend using the latest LTS version."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Git"}),": For cloning the project repositories. You can use a command-line client or a GUI like GitHub Desktop."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FFMPEG"}),": (Optional) Required only if you plan to work on or test the recording features."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-1-clone-the-repositories",children:"Step 1: Clone the Repositories"}),"\n",(0,r.jsx)(n.p,{children:"First, create a main project directory and clone the necessary plugNmeet repositories into it. Open your terminal and run the following commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# Create and enter a new directory for the project\nmkdir plugnmeet-dev\ncd plugnmeet-dev\n\n# Clone the main server repository\ngit clone https://github.com/mynaparrot/plugNmeet-server server\n\n# Clone the front-end client repository\ngit clone https://github.com/mynaparrot/plugNmeet-client client\n\n# Clone the recorder service repository\ngit clone https://github.com/mynaparrot/plugNmeet-recorder recorder\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-2-configure-and-run-the-backend-server",children:"Step 2: Configure and Run the Backend Server"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"plugNmeet-server"})," repository contains a ",(0,r.jsx)(n.code,{children:"docker-compose.yaml"})," file that orchestrates all the necessary backend services."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# Navigate to the server directory\ncd server\n\n# For the first time setup, copy the sample configuration files\ncp config_sample.yaml config.yaml\ncp livekit_sample.yaml livekit.yaml\ncp ingress_sample.yaml ingress.yaml\ncp nats_server_sample.conf nats_server.conf\ncp docker-compose_sample.yaml docker-compose.yaml\n\n# Build and start all backend services\ndocker-compose up --build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The first time you run this, it may take a few minutes to download and build the container images. On subsequent runs, you can simply use ",(0,r.jsx)(n.code,{children:"docker-compose up"})," to start the services much faster."]}),"\n",(0,r.jsx)(n.p,{children:"Leave this terminal window running, as it will show the logs for all backend services."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-configure-and-run-the-front-end-client",children:"Step 3: Configure and Run the Front-End Client"}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's get the user interface running. Open a ",(0,r.jsx)(n.strong,{children:"new terminal window or tab"})," so you can run the client simultaneously with the server."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# Navigate to the client directory from your main project folder\ncd client\n\n# Copy the sample configuration file\ncp src/assets/config_sample.js src/assets/config.js\n\n# Install all project dependencies\n# If you don't have pnpm, you can install it with `npm install -g pnpm`\npnpm install\n\n# Start the client development server\npnpm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once the development server is running, you can access the plugNmeet client in your web browser at: ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"http://localhost:3000/login.html",children:"http://localhost:3000/login.html"})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-4-optional-run-the-recorder-service",children:"Step 4: (Optional) Run the Recorder Service"}),"\n",(0,r.jsxs)(n.p,{children:["If you need to work on the recording features, you can start the recorder service. Open a ",(0,r.jsx)(n.strong,{children:"third terminal window or tab"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# Navigate to the recorder directory from your main project folder\ncd recorder\n\n# Copy the sample configuration files\ncp config_sample.yaml config.yaml\ncp docker-compose_sample.yaml docker-compose.yaml\n\n# Build and start the recorder service\ndocker-compose up --build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The recorder will now be running and will automatically listen for recording jobs from the ",(0,r.jsx)(n.code,{children:"plugNmeet-server"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"i-cant-connect-to-the-meeting-room",children:'"I can\'t connect to the meeting room."'}),"\n",(0,r.jsx)(n.p,{children:"This is a common issue on local development setups, often caused by Docker's networking. The LiveKit server inside the container needs to know your host machine's local IP address to establish a WebRTC connection."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Find your computer's local IP address (e.g., ",(0,r.jsx)(n.code,{children:"192.168.1.100"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Open the ",(0,r.jsx)(n.code,{children:"docker-compose.yaml"})," file inside the ",(0,r.jsx)(n.code,{children:"server"})," directory."]}),"\n",(0,r.jsxs)(n.li,{children:["Find the ",(0,r.jsx)(n.code,{children:"livekit"})," service section."]}),"\n",(0,r.jsxs)(n.li,{children:["Modify the ",(0,r.jsx)(n.code,{children:"command"})," line to add the ",(0,r.jsx)(n.code,{children:"--node-ip"})," flag with your IP:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'  # Before\n  command: --config "/app/livekit.yaml" --dev\n\n  # After\n  command: --config "/app/livekit.yaml" --dev --node-ip YOUR_LOCAL_IP_HERE\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["Restart the server with ",(0,r.jsx)(n.code,{children:"docker-compose down"})," and ",(0,r.jsx)(n.code,{children:"docker-compose up"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,r.jsx)(n.p,{children:"You now have a fully functional plugNmeet development environment! You can start making changes to the client or server code, and your changes will be reflected in real-time."}),"\n",(0,r.jsx)(n.p,{children:"We welcome all contributions. A great place to start is by looking at the open issues on our GitHub repositories. Happy coding!"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},4482:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(6363);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);