"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[472],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(n),g=o,d=p["".concat(s,".").concat(g)]||p[g]||m[g]||a;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={description:"Quick join to plugNmeet using PHP",sidebar_position:1},i="Quick join using PHP",u={unversionedId:"tutorials/quick_php",id:"tutorials/quick_php",title:"Quick join using PHP",description:"Quick join to plugNmeet using PHP",source:"@site/docs/tutorials/quick_php.md",sourceDirName:"tutorials",slug:"/tutorials/quick_php",permalink:"/docs/tutorials/quick_php",draft:!1,editUrl:"https://github.com/mynaparrot/plugNmeet-docs/docs/tutorials/quick_php.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Quick join to plugNmeet using PHP",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Scalable/Distributed setup",permalink:"/docs/developer-guide/scalable-setup"},next:{title:"Introduction",permalink:"/docs/api/intro"}},s={},l=[],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-join-using-php"},"Quick join using PHP"),(0,o.kt)("p",null,"In this section you'll learn how to generate join token for joining a session using PHP. The flow will be like this:"),(0,o.kt)("img",{src:"/img/tutorials/quick_join_flow.png",width:"400",alt:"quick_join_flow.png",loading:"lazy"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Step one to download ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mynaparrot/plugNmeet-sdk-php/releases"},"plugNmeet-sdk-php")," library")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We'll use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mynaparrot/plugNmeet-sdk-php/blob/main/examples/plugNmeetConnect.php"},"plugNmeetConnect.php")," class.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"quickJoin.php")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-PHP"},'require __DIR__ . "/plugNmeetConnect.php";\n\n$config = new stdClass();\n$config->plugnmeet_server_url = "http://localhost:8080";\n$config->plugnmeet_api_key = "plugnmeet";\n$config->plugnmeet_secret = "zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6";\n\n$connect = new plugNmeetConnect($config);\n\n$roomId = "room01"; // must be unique. You can also use $connect->getUUID();\n$max_participants = 0; // value 0 means no limit (unlimited)\n$user_full_name = "Your name";\n$userId = "Your-Unique-User-Id"; // must be unique for each user.\n\n$roomMetadata = array(\n    "room_features" => array(\n        "allow_webcams" => true,\n        "mute_on_start" => false,\n        "allow_screen_share" => true,\n        "allow_recording" => true,\n        "allow_rtmp" => true,\n        "allow_view_other_webcams" => true,\n        "allow_view_other_users_list" => true,\n        "admin_only_webcams" => false,\n    ),\n    "chat_features" => array(\n        "allow_chat" => true,\n        "allow_file_upload" => true\n    ),\n    "shared_note_pad_features" => array(\n        "allowed_shared_note_pad" => false\n    ),\n    "whiteboard_features" => array(\n        "allowed_whiteboard" => false\n    ),\n    "default_lock_settings" => array(\n        "lock_microphone" => false,\n        "lock_webcam" => false,\n        "lock_screen_sharing" => true,\n        "lock_chat" => false,\n        "lock_chat_send_message" => false,\n        "lock_chat_file_share" => false,\n    )\n);\n$isRoomActive = false;\n$output = new stdClass();\n$output->status = false;\n\ntry {\n    $res = $connect->isRoomActive($roomId);\n    $isRoomActive = $res->getStatus();\n    $output->status = true;\n    $output->msg = $res->getResponseMsg();\n} catch (Exception $e) {\n    $output->msg = $e->getMessage();\n}\n\nif (!$isRoomActive && $output->status) {\n    try {\n        $create = $connect->createRoom($roomId, "Test room", "Welcome to room", $max_participants, "", $roomMetadata);\n\n        $isRoomActive = $create->getStatus();\n        $output->status = $create->getStatus();\n        $output->msg = $create->getResponseMsg();\n    } catch (Exception $e) {\n        $output->msg = $e->getMessage();\n    }\n}\n\nif ($isRoomActive && $output->status) {\n    try {\n        $join = $connect->getJoinToken($roomId, $user_full_name, $userId, true);\n\n        $output->url = $config->plugnmeet_server_url . "?access_token=" . $join->getToken();\n        $output->status = $join->getStatus();\n        $output->msg = $join->getResponseMsg();\n    } catch (Exception $e) {\n        $output->msg = $e->getMessage();\n    }\n}\n\n')),(0,o.kt)("p",null,"When we'll get value of ",(0,o.kt)("inlineCode",{parentName:"p"},"$output->url")," that time we can redirect user like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-PHP"},'header("Location: " . $output->url);\n')))}m.isMDXComponent=!0}}]);