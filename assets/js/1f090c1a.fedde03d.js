"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[154],{9019:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/get-client-files","title":"Get Client Files API | plugNmeet API Reference","description":"API endpoint documentation for fetching the plugNmeet client-side application files. This allows for self-hosting the front-end assets.","source":"@site/docs/api/get-client-files.md","sourceDirName":"api","slug":"/api/get-client-files","permalink":"/docs/api/get-client-files","draft":false,"unlisted":false,"editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/docs/api/get-client-files.md","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"title":"Get Client Files API | plugNmeet API Reference","description":"API endpoint documentation for fetching the plugNmeet client-side application files. This allows for self-hosting the front-end assets.","keywords":["api","get client files","client assets","front-end","self-host client","sdk","endpoint"],"sidebar_position":40,"sidebar_label":"Get Client Files"},"sidebar":"tutorialSidebar","previous":{"title":"Delete","permalink":"/docs/api/analytics/delete"},"next":{"title":"Analytics","permalink":"/docs/others/analytics"}}');var i=s(5813),l=s(5880);const r={title:"Get Client Files API | plugNmeet API Reference",description:"API endpoint documentation for fetching the plugNmeet client-side application files. This allows for self-hosting the front-end assets.",keywords:["api","get client files","client assets","front-end","self-host client","sdk","endpoint"],sidebar_position:40,sidebar_label:"Get Client Files"},o="Get Client Files",a={},c=[{value:"How to Use",id:"how-to-use",level:3},{value:"Response",id:"response",level:2},{value:"Example HTML Structure",id:"example-html-structure",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"get-client-files",children:"Get Client Files"})}),"\n",(0,i.jsxs)(t.p,{children:["Endpoint: ",(0,i.jsx)(t.code,{children:"/getClientFiles"})]}),"\n",(0,i.jsxs)(t.p,{children:["The Plug-N-Meet client is a powerful, standalone React application. While you can embed it using an iframe, we ",(0,i.jsx)(t.strong,{children:"strongly recommend"})," a more seamless approach using this API endpoint."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"getClientFiles"})," API provides you with a list of all the necessary CSS and JavaScript files to render the Plug-N-Meet interface directly within your own web page. This method offers deeper integration, better performance, and avoids the complexities of iframes, allowing you to create a truly native-feeling video conferencing experience for your users."]}),"\n",(0,i.jsx)(t.p,{children:"It also gives you complete branding freedom. Since this method isn't tied to a specific domain, you can host the client on any SSL-enabled domain or subdomain, ensuring a seamless brand experience for your users."}),"\n",(0,i.jsx)(t.h3,{id:"how-to-use",children:"How to Use"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Call the ",(0,i.jsx)(t.code,{children:"/getClientFiles"})," endpoint from your server-side application."]}),"\n",(0,i.jsxs)(t.li,{children:["The API will respond with two arrays: ",(0,i.jsx)(t.code,{children:"css"})," and ",(0,i.jsx)(t.code,{children:"js"}),", containing the URLs to the required asset files."]}),"\n",(0,i.jsxs)(t.li,{children:["Construct the full URL for each filename. The API returns plain filenames (e.g., ",(0,i.jsx)(t.code,{children:"app.js"}),"). You must prepend your Plug-N-Meet server's asset path and the correct subdirectory (",(0,i.jsx)(t.code,{children:"/js/"})," for JavaScript files, ",(0,i.jsx)(t.code,{children:"/css/"})," for CSS files). For example: ",(0,i.jsx)(t.code,{children:"https://plugnmeet.example.com/assets/js/app.js"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["In the HTML page where you want to display the conference, dynamically generate ",(0,i.jsx)(t.code,{children:"<link>"})," and ",(0,i.jsx)(t.code,{children:"<script>"})," tags using the full URLs you just created."]}),"\n",(0,i.jsxs)(t.li,{children:["Ensure you have a ",(0,i.jsx)(t.code,{children:"div"})," with the id ",(0,i.jsx)(t.code,{children:"plugNmeet-app"})," in your ",(0,i.jsx)(t.code,{children:"<body>"}),", as this is where the React application will mount itself."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This process ensures that your application always loads the correct and most up-to-date client assets."}),"\n",(0,i.jsxs)(t.p,{children:["For implementation examples, refer to the ",(0,i.jsx)(t.a,{href:"https://github.com/mynaparrot/plugNmeet-sdk-php/blob/main/examples/conference.php",children:"conference.php"})," file or our plugins for ",(0,i.jsx)(t.a,{href:"https://github.com/mynaparrot/moodle-mod_plugnmeet/blob/main/conference.php",children:"Moodle"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/mynaparrot/plugNmeet-WordPress/blob/main/plugnmeet/public/partials/plugnmeet-public-display-client.php",children:"WordPress"}),", and ",(0,i.jsx)(t.a,{href:"https://github.com/mynaparrot/plugNmeet-Joomla/blob/main/components/com_plugnmeet/tmpl/room/conference.php",children:"Joomla"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example Request:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:"{}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"response",children:"Response"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Position"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"status"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"root"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Indicates whether the request was successful"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"msg"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"root"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Response message"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"css"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"array"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"root"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"An array of required CSS filenames."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"js"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"array"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"root"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"An array of required JavaScript filenames."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"example-html-structure",children:"Example HTML Structure"}),"\n",(0,i.jsx)(t.p,{children:"Here is a simplified example using PHP to illustrate the logic. This approach can be easily adapted to any server-side language (like Node.js, Python, or Ruby) to dynamically generate the required HTML."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"<?php\n// 1. Define your server URL.\n$plugnmeet_server_url = 'https://plugnmeet.example.com';\n\n// 2. Call the /getClientFiles API and get the response.\n// This is a sample response for demonstration.\n$api_response = [\n    'status' => true,\n    'css' => ['styles.8f34.css', 'vendor.9c3a.css'],\n    'js' => ['runtime.3e4a.js', 'vendor.b12c.js', 'app.5d6e.js', 'main-module.a4f1.js'],\n];\n\n// 3. Construct the base path for your assets.\n$assets_path = $plugnmeet_server_url . '/assets';\n\n?>\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/>\n    <title>plugNmeet</title>\n\n    \x3c!-- 4. Dynamically generate <link> tags for CSS files. --\x3e\n    <?php foreach ($api_response['css'] as $css_file): ?>\n        <link href=\"<?= $assets_path . '/css/' . $css_file ?>\" rel=\"stylesheet\" />\n    <?php endforeach; ?>\n\n    \x3c!--\n    5. Inject required window variables before loading scripts.\n       These are essential for the client to initialize correctly.\n    --\x3e\n    <script type=\"text/javascript\">\n        // Required: The URL of your plugNmeet server.\n        window.PLUG_N_MEET_SERVER_URL = \"<?= $plugnmeet_server_url ?>\";\n\n        // Required: The public path to the assets directory.\n        window.STATIC_ASSETS_PATH = \"<?= $assets_path ?>\";\n\n        // Optional: Add any other custom configurations.\n        // See: https://github.com/mynaparrot/plugNmeet-client/blob/main/src/assets/config_sample.js\n        window.ENABLE_SIMULCAST = true;\n    <\/script>\n</head>\n<body>\n    \x3c!-- This is the root element for the Plug-N-Meet client --\x3e\n    <div id=\"plugNmeet-app\"></div>\n\n    \x3c!-- 6. Dynamically generate <script> tags for JS files. --\x3e\n    <?php foreach ($api_response['js'] as $js_file): ?>\n        <?php if (str_starts_with($js_file, 'main-module.')): ?>\n            <script src=\"<?= $assets_path . '/js/' . $js_file ?>\" type=\"module\"><\/script>\n        <?php else: ?>\n            <script src=\"<?= $assets_path . '/js/' . $js_file ?>\" defer=\"defer\"><\/script>\n        <?php endif; ?>\n    <?php endforeach; ?>\n</body>\n</html>\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5880:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(9729);const i={},l=n.createContext(i);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);