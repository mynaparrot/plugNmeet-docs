"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[1203],{3459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var i=t(8108),o=t(7259),r=t(4482);const a={title:"How to Build Your Own Video Conferencing App in Under an Hour",slug:"build-video-conferencing-app-in-under-an-hour",authors:["jibon"],tags:["webrtc","api","sdk","developer","tutorial","programming"]},s=void 0,l={authorsImageUrls:[void 0]},u=[{value:"The Old Way: The Mountain of Complexity",id:"the-old-way-the-mountain-of-complexity",level:2},{value:"The plugNmeet Way: An API-First Framework",id:"the-plugnmeet-way-an-api-first-framework",level:2},{value:"Step 1: Set Up the Backend (5 Minutes)",id:"step-1-set-up-the-backend-5-minutes",level:3},{value:"Step 2: Control the Backend with an API Call (10 Minutes)",id:"step-2-control-the-backend-with-an-api-call-10-minutes",level:3},{value:"Step 3: Display the Frontend (2 Minutes)",id:"step-3-display-the-frontend-2-minutes",level:3},{value:"Conclusion: You&#39;re a Video App Developer Now",id:"conclusion-youre-a-video-app-developer-now",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize."}),"\n",(0,o.jsx)(n.p,{children:"But what if you could skip all of that?"}),"\n",(0,o.jsxs)(n.p,{children:["What if you could leverage a powerful, open-source platform that handles all the backend complexity, allowing you to build a fully functional, custom-branded video conferencing app in under an hour? With ",(0,o.jsx)(n.strong,{children:"plugNmeet"}),", you can."]}),"\n",(0,o.jsx)(n.p,{children:"This guide will show you the three core steps to building your own video app using plugNmeet's API-first architecture."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"the-old-way-the-mountain-of-complexity",children:"The Old Way: The Mountain of Complexity"}),"\n",(0,o.jsx)(n.p,{children:"Before we show you the easy way, it's important to appreciate the problems plugNmeet solves. Building a WebRTC app from scratch requires you to become an expert in:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Signaling:"})," Creating a system (usually with WebSockets) to coordinate connections between users."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NAT Traversal:"})," Setting up and managing STUN/TURN servers to allow users behind firewalls to connect to each other."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Media Server (SFU):"})," Deploying and scaling a Selective Forwarding Unit (like LiveKit, Mediasoup, or Janus) to efficiently route video and audio streams."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Backend Logic:"})," Writing an application server to manage rooms, users, and permissions."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Frontend UI:"})," Building a complete user interface from scratch to handle video elements, buttons, chat, and more."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is a massive undertaking."}),"\n",(0,o.jsx)(n.h2,{id:"the-plugnmeet-way-an-api-first-framework",children:"The plugNmeet Way: An API-First Framework"}),"\n",(0,o.jsx)(n.p,{children:"plugNmeet bundles all of this complexity into a single, open-source server that you can install with an automated script. It provides you with a simple, powerful set of APIs that act as your building blocks."}),"\n",(0,o.jsx)(n.p,{children:"Here's how you build your app in three steps."}),"\n",(0,o.jsx)(n.h3,{id:"step-1-set-up-the-backend-5-minutes",children:"Step 1: Set Up the Backend (5 Minutes)"}),"\n",(0,o.jsx)(n.p,{children:"First, you need the plugNmeet server, which includes LiveKit for media and NATS for messaging. You can install everything on a fresh Ubuntu server using our automated installation script."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"wget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install.sh\nchmod +x install.sh\n./install.sh\n"})}),"\n",(0,o.jsxs)(n.p,{children:["That's it. You now have a production-ready media server and API endpoint. The script will provide you with your ",(0,o.jsx)(n.code,{children:"API_KEY"})," and ",(0,o.jsx)(n.code,{children:"API_SECRET"}),", which you'll need for the next step."]}),"\n",(0,o.jsx)(n.h3,{id:"step-2-control-the-backend-with-an-api-call-10-minutes",children:"Step 2: Control the Backend with an API Call (10 Minutes)"}),"\n",(0,o.jsx)(n.p,{children:"Next, you need to tell your backend to create a meeting room and generate a token for a user to join. This is done with a simple server-side API call."}),"\n",(0,o.jsx)(n.p,{children:"You can use our official PHP SDK or JavaScript SDK, or call the API directly. Here\u2019s a simple example in PHP:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"<?php\nrequire_once 'vendor/autoload.php'; // Assuming you've installed the SDK via Composer\n\nuse PlugNmeet\\auth\\Auth;\nuse PlugNmeet\\plugNmeet;\n\n// Your API credentials from the server installation\n$apiKey = 'plugnmeet';\n$apiSecret = 'zumyyYWqv7KR2kUqvYdq4z4sXg7XTBD2ljT6';\n$host = 'https://demo.plugnmeet.com'; // Replace with your server URL\n\n$auth = new Auth($apiKey, $apiSecret);\n$plugNmeet = new plugNmeet($host, $auth);\n\n// 1. Create a new room\n$room = $plugNmeet->room()->createRoom([\n    'room_id' => 'test-room-123',\n    'max_participants' => 20,\n]);\n\n// 2. Generate a join token for a user\n$token = $plugNmeet->auth()->getJoinToken([\n    'room_id' => 'test-room-123',\n    'user_info' => [\n        'name' => 'John Doe',\n        'user_id' => 'user-id-001',\n        'is_admin' => true,\n    ],\n]);\n\necho $token;\n?>\n"})}),"\n",(0,o.jsx)(n.p,{children:'This script creates a room and gives you a unique URL with a token that grants "John Doe" access to that room.'}),"\n",(0,o.jsx)(n.h3,{id:"step-3-display-the-frontend-2-minutes",children:"Step 3: Display the Frontend (2 Minutes)"}),"\n",(0,o.jsx)(n.p,{children:"Now for the final piece: the user interface. Do you need to build one from scratch? No."}),"\n",(0,o.jsx)(n.p,{children:"plugNmeet provides a complete, feature-rich, and customizable web client. You simply need to direct your user to the join URL generated in the previous step."}),"\n",(0,o.jsxs)(n.p,{children:["The join URL looks something like this:\n",(0,o.jsx)(n.code,{children:"https://your-domain.com/login.html?access_token=YOUR_GENERATED_TOKEN"})]}),"\n",(0,o.jsx)(n.p,{children:"When a user visits this link, the plugNmeet client application loads, authenticates them with the token, and places them directly into the video meeting."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"conclusion-youre-a-video-app-developer-now",children:"Conclusion: You're a Video App Developer Now"}),"\n",(0,o.jsx)(n.p,{children:"In the time it took to read this article, you've learned the entire workflow:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Install a powerful backend"})," with a single command."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use a simple API call"})," to control rooms and users."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use the pre-built client"})," to provide an instant user interface."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["You've skipped the mountain of WebRTC complexity and gone straight to building your application. From here, you can use our ",(0,o.jsx)(n.strong,{children:"Design Customization"})," features to completely white-label the client, or use our webhooks to build complex business logic around your meetings."]}),"\n",(0,o.jsx)(n.p,{children:"The power of a complete WebRTC platform is now at your fingertips. What will you build?"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Ready to get started?"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.strong,{children:["Follow the ",(0,o.jsx)(n.a,{href:"/docs/installation",children:"Installation Guide"})]})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.strong,{children:["Explore the ",(0,o.jsx)(n.a,{href:"/docs/api/intro",children:"API Documentation"})]})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4482:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6363);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},8108:e=>{e.exports=JSON.parse('{"permalink":"/blog/build-video-conferencing-app-in-under-an-hour","editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","source":"@site/blog/2025-10-26-build-video-conferencing-app-in-under-an-hour.md","title":"How to Build Your Own Video Conferencing App in Under an Hour","description":"Building a video conferencing application sounds like a monumental task. You have to wrestle with the complexities of WebRTC, set up signaling servers, manage STUN/TURN for NAT traversal, and handle the resource-intensive job of routing media streams. The backend infrastructure alone can take months to build and stabilize.","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":true,"label":"webrtc","permalink":"/blog/tags/webrtc"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":3.83,"hasTruncateMarker":true,"authors":[{"name":"Jibon L. Costa","title":"Founding developer","url":"https://github.com/jibon57","imageURL":"https://github.com/jibon57.png","key":"jibon","page":null}],"frontMatter":{"title":"How to Build Your Own Video Conferencing App in Under an Hour","slug":"build-video-conferencing-app-in-under-an-hour","authors":["jibon"],"tags":["webrtc","api","sdk","developer","tutorial","programming"]},"unlisted":false,"prevItem":{"title":"Why We Chose LiveKit and NATS: A Deep Dive into Our Backend Architecture","permalink":"/blog/backend-architecture-deep-dive"}}')}}]);