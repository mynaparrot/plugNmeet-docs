"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[975],{1536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"firewall","title":"Ports & firewall","description":"To communicate with clients, plugNmeet and LiveKit use several ports. Before installing plugNmeet, ensure that those ports are not blocked by your firewall.","source":"@site/docs/firewall.md","sourceDirName":".","slug":"/firewall","permalink":"/docs/firewall","draft":false,"unlisted":false,"editUrl":"https://github.com/mynaparrot/plugNmeet-docs/edit/main/docs/firewall.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/intro"},"next":{"title":"Installation","permalink":"/docs/installation"}}');var r=n(6070),l=n(3784);const i={sidebar_position:2},o="Ports & firewall",a={},c=[{value:"Ports",id:"ports",level:2},{value:"Configure firewall",id:"configure-firewall",level:2},{value:"Testing the firewall",id:"testing-the-firewall",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"ports--firewall",children:"Ports & firewall"})}),"\n",(0,r.jsxs)(t.p,{children:["To communicate with clients, plugNmeet and LiveKit use several ports. Before installing ",(0,r.jsx)(t.code,{children:"plugNmeet"}),", ensure that those ports are not blocked by your firewall."]}),"\n",(0,r.jsx)(t.h2,{id:"ports",children:"Ports"}),"\n",(0,r.jsx)(t.p,{children:"When installing plugNmeet behind a firewall, make sure the following ports are open:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Port"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Required"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"80"}),(0,r.jsx)(t.td,{children:"TCP"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Usually required when issuing an SSL certificate with Let's Encrypt."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"443"}),(0,r.jsx)(t.td,{children:"TCP"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The primary HTTPS port for communicating with haproxy. Haproxy will interact with other services."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"7881"}),(0,r.jsx)(t.td,{children:"TCP"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Used when the client could not connect via UDP (e.g. VPN, corporate firewalls)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"50000-60000"}),(0,r.jsx)(t.td,{children:"UDP"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"LiveKit advertises these ports as WebRTC host candidates (each participant in the room will use two ports)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"443"}),(0,r.jsx)(t.td,{children:"UDP"}),(0,r.jsx)(t.td,{children:"No"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Optional"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"configure-firewall",children:"Configure firewall"}),"\n",(0,r.jsx)(t.p,{children:"Based on your server provider you can follow:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Amazon AWS: ",(0,r.jsx)(t.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",children:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html"})]}),"\n",(0,r.jsxs)(t.li,{children:["Google Cloud: ",(0,r.jsx)(t.a,{href:"https://cloud.google.com/vpc/docs/using-firewalls",children:"https://cloud.google.com/vpc/docs/using-firewalls"})]}),"\n",(0,r.jsxs)(t.li,{children:["Azure: ",(0,r.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/azure/virtual-machines/windows/nsg-quickstart-portal",children:"https://docs.microsoft.com/en-us/azure/virtual-machines/windows/nsg-quickstart-portal"})]}),"\n",(0,r.jsxs)(t.li,{children:["DigitalOcean: ",(0,r.jsx)(t.a,{href:"https://docs.digitalocean.com/products/networking/firewalls/how-to/configure-rules/",children:"https://docs.digitalocean.com/products/networking/firewalls/how-to/configure-rules/"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"testing-the-firewall",children:"Testing the firewall"}),"\n",(0,r.jsx)(t.p,{children:"After you have made the changes to you firewall settings, before proceeding to the installation, take a moment and test that you have configured the firewall correctly."}),"\n",(0,r.jsxs)(t.p,{children:["To test connections on various ports needed by plugNmeet, you will use a tool called ",(0,r.jsx)(t.code,{children:"netcat"})," to listen for connections. You'll use ",(0,r.jsx)(t.code,{children:"netcat"})," on the plugNmeet server and on external server (outside the firewall) to generate connections. If the connections test fails, the firewall configuration is incorrect."]}),"\n",(0,r.jsxs)(t.p,{children:["First, install ",(0,r.jsx)(t.code,{children:"netcat"})," on the plugNmeet server using the following command:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"sudo apt install netcat\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you've already installed plugNmeet server using the installation script, you'll need to stop haproxy and plugnmeet server before testing. Otherwise ports will be keep using."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"systemctl stop plugnmeet\nsystemctl stop haproxy\n"})}),"\n",(0,r.jsx)(t.p,{children:"We can now run netcat in our plugNmeet server to listen on ports and try connecting from an external computer. As root, run the following command:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc -l 80\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"netcat"})," is now going to echo to the terminal any text it receives on port 80 (you can quit the command later using Ctrl/Control + c)."]}),"\n",(0,r.jsxs)(t.p,{children:["Next, on a second computer that is outside of the firewall, it must go through the firewall to access the plugNmeet server \u2013 install ",(0,r.jsx)(t.code,{children:"netcat"})," as well. If you're using ",(0,r.jsx)(t.strong,{children:"Windows"}),", you can get netcat from ",(0,r.jsx)(t.a,{href:"https://eternallybored.org/misc/netcat/",children:"here"}),". Replace YOUR_SERVER_IP with your plugNmeet domain or IP address of your plugNmeet server, run the following command"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc YOUR_SERVER_IP 80\n"})}),"\n",(0,r.jsxs)(t.p,{children:["and type the word ",(0,r.jsx)(t.code,{children:"test"})," and press ENTER. If the firewall is forwarding incoming connections on port 80 to the internal plugNmeet server, you should see the word ",(0,r.jsx)(t.code,{children:"test"})," appear after the ",(0,r.jsx)(t.code,{children:"nc -l 80"})," command, as in"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc -l 80\ntest\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If the word ",(0,r.jsx)(t.code,{children:"test"})," does not appear, double-check the firewall configuration to ensure it's forwarding connections on port 80 and then test again."]}),"\n",(0,r.jsxs)(t.p,{children:["Repeat these tests with port ",(0,r.jsx)(t.code,{children:"443"})," & ",(0,r.jsx)(t.code,{children:"7881"})," as well as. That covers the TCP ports testing."]}),"\n",(0,r.jsx)(t.p,{children:"Next, we need to test that UDP connections in the range 50000-60000 are forwarded as well. On your plugNmeet server, run the following netcat command to listen for incoming data via UDP on port 50008 (here, we\u2019re picking a port in the range 50000-60000)."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc -u -l 50008\n"})}),"\n",(0,r.jsx)(t.p,{children:"Again, on a computer outside the firewall, replace YOUR_SERVER_IP with your plugNmeet domain or IP address of your plugNmeet server and run the command"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc -u YOUR_SERVER_IP 50008\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Type ",(0,r.jsx)(t.code,{children:"test"})," into the terminal and press ENTER. You should see the word test appear on the terminal of the plugNmeet server, as in"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"nc -u -l 50008\ntest\n"})}),"\n",(0,r.jsx)(t.p,{children:"As before, if the above test fails, double-check the settings of the firewall to ensure its properly forwarding UDP packets in the range 50000-60000 and test again."})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3784:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(758);const r={},l=s.createContext(r);function i(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);