"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[739],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>v});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,v=u["".concat(a,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(v,i(i({ref:t},s),{},{components:r})):n.createElement(v,i({ref:t},s))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=m;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<l;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9157:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const l={description:"plugNmeet setup development environment",sidebar_position:2},i="Setting up for development",p={unversionedId:"developer-guide/setup-development",id:"developer-guide/setup-development",title:"Setting up for development",description:"plugNmeet setup development environment",source:"@site/docs/developer-guide/setup-development.md",sourceDirName:"developer-guide",slug:"/developer-guide/setup-development",permalink:"/docs/developer-guide/setup-development",draft:!1,editUrl:"https://github.com/mynaparrot/plugNmeet-docs/docs/developer-guide/setup-development.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"plugNmeet setup development environment",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/developer-guide/intro"},next:{title:"Design Customisation",permalink:"/docs/developer-guide/design-customisation"}},a={},c=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Prepare",id:"prepare",level:2},{value:"Server",id:"server",level:2},{value:"Client",id:"client",level:2},{value:"Recorder",id:"recorder",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setting-up-for-development"},"Setting up for development"),(0,o.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"You'll require following software installed in your PC:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.docker.com/products/docker-desktop"},"Docker")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"NodeJS")),(0,o.kt)("li",{parentName:"ol"},"Git (",(0,o.kt)("a",{parentName:"li",href:"https://desktop.github.com/"},"Desktop")," or ",(0,o.kt)("a",{parentName:"li",href:"https://git-scm.com/downloads"},"cli"),")"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.ffmpeg.org/download.html"},"FFMPEG")," (Optional)")),(0,o.kt)("h2",{id:"prepare"},"Prepare"),(0,o.kt)("p",null,"Open your terminal & run following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir plugNmeet\ncd plugNmeet\n\n# clone server\ngit clone https://github.com/mynaparrot/plugNmeet-server server\n\n# clone client\ngit clone https://github.com/mynaparrot/plugNmeet-client client\n\n# clone recorder\ngit clone https://github.com/mynaparrot/plugNmeet-recorder recorder\n\n")),(0,o.kt)("h2",{id:"server"},"Server"),(0,o.kt)("p",null,"To start server run following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# for first time\ncd server\ncp config_sample.yaml config.yaml\ncp livekit_sample.yaml livekit.yaml\ncp docker-compose_sample.yaml docker-compose.yaml\n\n# to start server\ndocker-compose up --build\n\n# after every time\ndocker-compose up\n\n")),(0,o.kt)("h2",{id:"client"},"Client"),(0,o.kt)("p",null,"Open another tab from your terminal & run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# navigate to client directory that you created above\ncd client\ncp src/assets/config_sample.js src/assets/config.js\nnpm install\n\n# start client\nnpm start\n")),(0,o.kt)("p",null,"When the npm will complete to start up, you will be able to access client from: http://localhost:3000/login.html"),(0,o.kt)("h2",{id:"recorder"},"Recorder"),(0,o.kt)("p",null,"Open another tab from your terminal & run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# navigate to recorder directory that you created above\ncd recorder\ncp config_sample.yaml config.yaml\nnpm install\n\n# start recorder\nnpm run dev\n")),(0,o.kt)("p",null,"Now the recorder should be ready for getting signal from ",(0,o.kt)("inlineCode",{parentName:"p"},"plugNmeet-server"),"."),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"I can't enter to the server showing response error",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Open ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file. Under ",(0,o.kt)("inlineCode",{parentName:"p"},"livekit")," section:")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'--config "/app/livekit.yaml" --dev\n')),(0,o.kt)("p",null,"add your device's IP address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'--config "/app/livekit.yaml" --dev --node-ip YOUR_IP_HERE\n')),(0,o.kt)("p",null,"Now start the server again."))}u.isMDXComponent=!0}}]);