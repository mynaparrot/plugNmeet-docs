"use strict";(self.webpackChunkplugnmeet_documentation=self.webpackChunkplugnmeet_documentation||[]).push([[941],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var i=2;i<l;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const l={description:"plugNmeet Scalable/Distributed setup",sidebar_position:4},o="Scalable/Distributed setup",s={unversionedId:"developer-guide/scalable-setup",id:"developer-guide/scalable-setup",title:"Scalable/Distributed setup",description:"plugNmeet Scalable/Distributed setup",source:"@site/docs/developer-guide/scalable-setup.md",sourceDirName:"developer-guide",slug:"/developer-guide/scalable-setup",permalink:"/docs/developer-guide/scalable-setup",draft:!1,editUrl:"https://github.com/mynaparrot/plugNmeet-docs/docs/developer-guide/scalable-setup.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"plugNmeet Scalable/Distributed setup",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Design Customisation",permalink:"/docs/developer-guide/design-customisation"},next:{title:"Quick join using PHP",permalink:"/docs/tutorials/quick_php"}},p={},i=[{value:"Servers",id:"servers",level:2},{value:"OS",id:"os",level:2},{value:"Setup docker",id:"setup-docker",level:2},{value:"Font installation",id:"font-installation",level:2},{value:"Setup livekit",id:"setup-livekit",level:2},{value:"Setup plugNmeet-etherpad",id:"setup-plugnmeet-etherpad",level:2},{value:"Setup plugNmeet-server",id:"setup-plugnmeet-server",level:2},{value:"Setup plugNmeet-recorder",id:"setup-plugnmeet-recorder",level:2},{value:"Setup HAProxy",id:"setup-haproxy",level:2}],c={toc:i};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"scalabledistributed-setup"},"Scalable/Distributed setup"),(0,a.kt)("p",null,"plugNmeet allows you to install its components on multiple servers. We'll go over it in this article."),(0,a.kt)("h2",{id:"servers"},"Servers"),(0,a.kt)("p",null,"I'm assuming we've following servers. You can have any number based on your requirements. For the services of Redis, MariaDB, and NFS, we will use a third-party provider. If you'd like, you can set up your own, but we won't go into that setup in this article."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,a.kt)("th",{parentName:"tr",align:null},"IPs"),(0,a.kt)("th",{parentName:"tr",align:null},"Ports"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Domain"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://github.com/mynaparrot/plugNmeet-server"},"plugNmeet-server")),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.1",(0,a.kt)("br",null),"100.100.100.2"),(0,a.kt)("td",{parentName:"tr",align:null},"8080/tcp"),(0,a.kt)("td",{parentName:"tr",align:"left"},"plugnmeet.example.com"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We'll use 2 servers for plugNmeet. Ports open only for HAProxy,",(0,a.kt)("strong",{parentName:"td"},"not public"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://github.com/livekit/livekit"},"livekit")),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.10",(0,a.kt)("br",null)," 100.100.100.11",(0,a.kt)("br",null)," 100.100.100.12"),(0,a.kt)("td",{parentName:"tr",align:null},"7880/tcp",(0,a.kt)("br",null),"7881/tcp",(0,a.kt)("br",null),"5349/tcp",(0,a.kt)("br",null),"50000-60000/udp"),(0,a.kt)("td",{parentName:"tr",align:"left"},"livekit.example.com",(0,a.kt)("br",null),"turn.example.com"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We'll use 3 servers for livekit. 7880/tcp & 5349/tcp open only for HAProxy, ",(0,a.kt)("strong",{parentName:"td"},"not public"),". 7881/tcp & 50000-60000/udp ",(0,a.kt)("strong",{parentName:"td"},"open for public"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://github.com/mynaparrot/plugNmeet-recorder"},"plugNmeet-recorder")),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.20",(0,a.kt)("br",null)," 100.100.100.21 ",(0,a.kt)("br",null),"100.100.100.22"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:"left"},"n/a"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We'll use 3 servers for recorder. Recorder doesn't need any port.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://github.com/mynaparrot/plugNmeet-etherpad"},"plugNmeet-etherpad")),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.30"),(0,a.kt)("td",{parentName:"tr",align:null},"9001/tcp"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ether.example.com"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We'll use 1 servers for etherpad. 9001/tcp open only for HAProxy, not public.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HAProxy"),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.35"),(0,a.kt)("td",{parentName:"tr",align:null},"80/tcp",(0,a.kt)("br",null),"443/tcp"),(0,a.kt)("td",{parentName:"tr",align:"left"},"n/a"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We'll install HAProxy in one server. Both ports are open for public")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Mariadb"),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.40"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:"left"},"n/a"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We've a Mariadb cluster from provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Redis"),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.50"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:"left"},"n/a"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We've a Redis cluster from provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"NFS"),(0,a.kt)("td",{parentName:"tr",align:null},"100.100.100.60"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:"left"},"n/a"),(0,a.kt)("td",{parentName:"tr",align:"left"},"We've a NFS storage from provider")))),(0,a.kt)("h2",{id:"os"},"OS"),(0,a.kt)("p",null,"We'll use Ubuntu for all of above servers."),(0,a.kt)("h2",{id:"setup-docker"},"Setup docker"),(0,a.kt)("p",null,"We'll use docker for ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-server"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"livekit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-etherpad"),". So, we can install docker for all of those servers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt update && sudo apt -y install ca-certificates curl gnupg lsb-release\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \\\n    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list >/dev/null\n\nsudo apt update && sudo apt -y install docker-ce docker-ce-cli containerd.io docker-compose\n')),(0,a.kt)("h2",{id:"font-installation"},"Font installation"),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-server")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-etherpad")," servers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update && apt -y install --no-install-recommends \\\n    fonts-arkpandora \\\n    fonts-crosextra-carlito \\\n    fonts-crosextra-caladea \\\n    fonts-noto \\\n    fonts-noto-cjk \\\n    fonts-noto-core \\\n    fonts-noto-mono \\\n    fonts-noto-ui-core \\\n    fonts-liberation \\\n    fonts-dejavu \\\n    fonts-dejavu-extra \\\n    fonts-liberation \\\n    fonts-liberation2 \\\n    fonts-linuxlibertine \\\n    fonts-sil-gentium \\\n    fonts-sil-gentium-basic \\\n    fontconfig\n")),(0,a.kt)("h2",{id:"setup-livekit"},"Setup livekit"),(0,a.kt)("p",null,"Login to ",(0,a.kt)("inlineCode",{parentName:"p"},"livekit")," server & follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir -p /opt/plugNmeet\ncd /opt/plugNmeet\ntouch docker-compose.yaml\ntouch livekit.yaml\n")),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," & add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'version: "3"\nservices:\n  livekit:\n    image: livekit/livekit-server\n    restart: always\n    network_mode: "host"\n    volumes:\n      - .:/app\n      - /etc/ssl/certs/:/etc/ssl/certs/:ro\n    command: --config "/app/livekit.yaml" --node-ip PUBLIC_IP\n    healthcheck:\n      test: wget --no-verbose --tries=5 --spider http://localhost:7880 || kill 1\n      interval: 20s\n      timeout: 1s\n      retries: 5\n')),(0,a.kt)("p",null,"Change ",(0,a.kt)("inlineCode",{parentName:"p"},"PUBLIC_IP")," with the public IP of this server."),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"livekit.yaml")," & add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'port: 7880\nrtc:\n  port_range_start: 50000\n  port_range_end: 60000\n  tcp_port: 7881\n  use_external_ip: true\nredis:\n  address: 100.100.100.50:6379\n  password: "my-pass"\n  db: 0\nroom:\n  auto_create: false\nkeys:\n  LIVEKIT_API_KEY: LIVEKIT_SECRET\nwebhook:\n  api_key: LIVEKIT_API_KEY\n  urls:\n    - "https://plugnmeet.example.com/webhook"\nturn:\n  enabled: true\n  udp_port: 443\n  tls_port: 5349\n  external_tls: true\n  domain: turn.example.com\n\n')),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_API_KEY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_SECRET"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"turn.example.com"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"plugnmeet.example.com"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redis")," with correct info. You can generate ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_SECRET")," by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 36 | head -n 1\n")),(0,a.kt)("p",null,"Make sure you're using same information to ",(0,a.kt)("strong",{parentName:"p"},"all of your livekit server"),".\nStart docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("h2",{id:"setup-plugnmeet-etherpad"},"Setup plugNmeet-etherpad"),(0,a.kt)("p",null,"Login to ",(0,a.kt)("inlineCode",{parentName:"p"},"etherpad")," server & follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir -p /opt/plugNmeet/etherpad\nsudo mkdir -p /opt/plugNmeet/redis-data\nsudo chmod 777 /opt/plugNmeet/redis-data\ncd /opt/plugNmeet\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/settings.json -O etherpad/settings.json\ntouch etherpad/APIKEY.txt\n")),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," & add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'version: "3"\nservices:\n  redis:\n    image: redis:6\n    restart: always\n    network_mode: "host"\n    volumes:\n      - ./redis-data:/data\n    healthcheck:\n      test: "redis-cli ping || kill 1"\n      interval: 10s\n      timeout: 1s\n      retries: 5\n  etherpad:\n    image: mynaparrot/plugnmeet-etherpad\n    restart: always\n    network_mode: "host"\n    volumes:\n      - ./etherpad/APIKEY.txt:/opt/etherpad-lite/APIKEY.txt\n      - ./etherpad/settings.json:/opt/etherpad-lite/settings.json\n      - /usr/share/fonts/:/usr/share/fonts/:ro\n      - /etc/fonts/:/etc/fonts/:ro\n      - /usr/share/fontconfig/:/usr/share/fontconfig/:ro\n      - /var/cache/fontconfig/:/var/cache/fontconfig/:ro\n    depends_on:\n      - redis\n    healthcheck:\n      test: curl -f --retry 5 --retry-delay 3 "http://localhost:9001/api" || kill 1\n      interval: 20s\n      timeout: 1s\n      retries: 5\n')),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"etherpad/APIKEY.txt")," & replace ",(0,a.kt)("inlineCode",{parentName:"p"},"ETHERPAD_API")," with correct key. You can generate key by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 80 | head -n 1\n")),(0,a.kt)("p",null,"Start docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("h2",{id:"setup-plugnmeet-server"},"Setup plugNmeet-server"),(0,a.kt)("p",null,"Login to ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-server")," server & follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo update && sudo apt install --no-install-recommends -y wget libreoffice mupdf-tools\nsudo mkdir -p /opt/plugNmeet/recording_files\ncd /opt/plugNmeet\ntouch docker-compose.yaml\ntouch config.yaml\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mynaparrot/plugNmeet-client"},"plugNmeet-client")," configuration. Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"plugnmeet.example.com")," with correct domain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/mynaparrot/plugNmeet-client/releases/latest/download/client.zip -O client.zip\nunzip client.zip\ncp client/dist/assets/config_sample.js client/dist/assets/config.js\n\nsed -i \"s/window.PLUG_N_MEET_SERVER_URL.*/window.PLUG_N_MEET_SERVER_URL = 'https:\\/\\/plugnmeet.example.com'\\;/g\" \\\n    client/dist/assets/config.js\n\nrm client.zip\n")),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," & write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'version: "3"\nservices:\n  plugnmeet:\n    image: mynaparrot/plugnmeet-server\n    restart: always\n    network_mode: "host"\n    volumes:\n      - .:/app\n      - /etc/ssl/certs/:/etc/ssl/certs/:ro\n      - /usr/share/fonts/:/usr/share/fonts/:ro\n      - /etc/fonts/:/etc/fonts/:ro\n      - /usr/share/fontconfig/:/usr/share/fontconfig/:ro\n      - /var/cache/fontconfig/:/var/cache/fontconfig/:ro\n    command: --config "/app/config.yaml"\n    healthcheck:\n      test: wget --no-verbose --tries=5 --spider http://localhost:8080 || kill 1\n      interval: 20s\n      timeout: 1s\n      retries: 5\n')),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"config.yaml"),". Latest contents can be found from either ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/mynaparrot/plugNmeet-server/main/config_sample.yaml"},"here")," or ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/config.yaml"},"here")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'client:\n  port: 8080\n  debug: false\n  path: "/app/client/dist"\n  ## this will require during authentication. Use random secret.\n  # openssl rand -hex 32\n  # OR\n  # cat /dev/urandom | tr -dc \'a-zA-Z0-9\' | fold -w 36 | head -n 1\n  api_key: PLUG_N_MEET_API_KEY\n  secret: PLUG_N_MEET_SECRET\n  webhook_conf:\n    # enable webhook. This will post response for different events\n    enable: false\n    # set url bellow. This will be use as global.\n    # this is optional\n    url: ""\n    # During create room you can set custom hook URL too.\n    # if you set enable_for_per_meeting: true\n    # then extra post response will send in that address too\n    enable_for_per_meeting: false\n  prometheus:\n    enable: false\n    metrics_path: "/metrics"\n  proxy_header: "X-Forwarded-For"\nlog_settings:\n  log_file: "/app/log/plugNmeet.log"\n  # maxsize of log file in MB\n  maxsize: 20\n  maxbackups: 4\n  # max age of log before rotate in days\n  maxage: 2\nlivekit_info:\n  host: "https://livekit.example.com"\n  api_key: LIVEKIT_API_KEY\n  secret: LIVEKIT_SECRET\n  # value in minutes. Default 10 minutes. Client will renew token automatically\n  token_validity: 10m\nredis_info:\n  address: 100.100.100.50:6379\n  password: "my-pass"\n  db: 0\nmysql_info:\n  host: 100.100.100.40\n  port: 3306\n  username: "root"\n  password: "DB_ROOT_PASSWORD"\n  db: "plugnmeet"\n  prefix: "pnm_"\nupload_file_settings:\n  path: "/app/upload"\n  # file size in MB. Default 50MB\n  max_size: 50\n  # By default, files will be deleted as soon as the session will be finish.\n  # You can set it true to disable deleting files.\n  keep_forever: false\n  allowed_types:\n    - "jpg"\n    - "png"\n    - "jpeg"\n    - "svg"\n    - "pdf"\n    - "docx"\n    - "txt"\n    - "xlsx"\n    - "pptx"\n    - "zip"\n    - "mp4"\n    - "webm"\n    - "mp3"\nrecorder_info:\n  # this value should be same as recorder\'s copy_to_dir path\n  recording_files_path: "/app/recording_files"\n  token_validity: 30m\nshared_notepad:\n  enabled: true\n  # multiple hosts can be added here\n  # server will be selected based on load\n  # the value of id should be unique\n  etherpad_hosts:\n    -\n      id: "node_01"\n      host: "https://ether.example.com"\n      api_key: "ETHERPAD_API"\nlti_info:\n  v1_tool_url: https://plugnmeet.example.com/lti/v1\n')),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_API_KEY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_SECRET"),",",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_API_KEY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_SECRET"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"turn.example.com"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"plugnmeet.example.com"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redis"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ether.example.com"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ETHERPAD_API"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mysql_info")," with correct info. You can generate ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_SECRET")," by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 36 | head -n 1\n")),(0,a.kt)("p",null,"Make sure you're using same information to ",(0,a.kt)("strong",{parentName:"p"},"all of your plugNmeet server"),".\nStart docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("p",null,"We'll mount ",(0,a.kt)("inlineCode",{parentName:"p"},"NFS")," server into ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/plugNmeet/recording_files")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install nfs-common\nsudo mount 100.100.100.60:/recording_files /opt/plugNmeet/recording_files\n")),(0,a.kt)("p",null,"To make it permanent by adding in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/fstab")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"100.100.100.60:/recording_files    /opt/plugNmeet/recording_files   nfs4    noauto  0  0\n")),(0,a.kt)("h2",{id:"setup-plugnmeet-recorder"},"Setup plugNmeet-recorder"),(0,a.kt)("p",null,"Login to ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet-recorder")," server & follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir -p /opt/plugNmeet/\ncd /opt/plugNmeet\n\ncurl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add\necho "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >/etc/apt/sources.list.d/google-chrome.list\n\n## prepare nodejs\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\n\n## install require software\nsudo apt update && sudo apt -y install nodejs xvfb google-chrome-stable ffmpeg unzip\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/plugnmeet-recorder.service -O /etc/systemd/system/plugnmeet-recorder.service\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/plugnmeet-recorder@main.service -O /etc/systemd/system/plugnmeet-recorder@main.service\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/plugnmeet-recorder@websocket.service -O /etc/systemd/system/plugnmeet-recorder@websocket.service\n\nsystemctl daemon-reload\nsystemctl enable plugnmeet-recorder\nsystemctl enable plugnmeet-recorder@main\nsystemctl enable plugnmeet-recorder@websocket\n\nwget https://github.com/mynaparrot/plugNmeet-recorder/releases/latest/download/recorder.zip -O recorder.zip\nunzip recorder.zip\n\ncp recorder/config_sample.yaml recorder/config.yaml\nnpm install --ignore-scripts --production -C recorder\nrm recorder.zip\n")),(0,a.kt)("p",null,"Now open ",(0,a.kt)("inlineCode",{parentName:"p"},"recorder/config.yaml")," & replace ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_SERVER_DOMAIN"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_API_KEY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PLUG_N_MEET_SECRET")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"redis")," info. Make sure you're using same info as above setups into all recording servers."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note: Make sure ",(0,a.kt)("inlineCode",{parentName:"strong"},"id")," and ",(0,a.kt)("inlineCode",{parentName:"strong"},"sub_path")," info is unique for each server.")," For example: server 1 ",(0,a.kt)("inlineCode",{parentName:"p"},"node_01"),"; server 2 ",(0,a.kt)("inlineCode",{parentName:"p"},"node_02"),"; server 3 ",(0,a.kt)("inlineCode",{parentName:"p"},"node_03")," ....."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"WEBSOCKET_AUTH_TOKEN")," can be generate by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1\n")),(0,a.kt)("p",null,"We'll mount ",(0,a.kt)("inlineCode",{parentName:"p"},"NFS")," server into ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/plugNmeet/recording_files")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install nfs-common\nsudo mount 100.100.100.60:/recording_files /opt/plugNmeet/recording_files\n")),(0,a.kt)("p",null,"To make it permanent by adding in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/fstab")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"100.100.100.60:/recording_files    /opt/plugNmeet/recording_files   nfs4    noauto  0  0\n")),(0,a.kt)("p",null,"Now start server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl start plugnmeet-recorder\n")),(0,a.kt)("h2",{id:"setup-haproxy"},"Setup HAProxy"),(0,a.kt)("p",null,"Login to your HAProxy server & follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apt update && apt install -y --no-install-recommends software-properties-common\nadd-apt-repository ppa:vbernat/haproxy-2.6 -y\napt -y update && apt install -y haproxy\nservice haproxy stop\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg_bk\nmkdir -p /etc/haproxy/ssl\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/haproxy_lets_encrypt.cfg -O /etc/haproxy/haproxy.cfg\nservice haproxy start\n")),(0,a.kt)("p",null,"Configure lets encrypt. Make sure replace with correct info:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apt install -y snapd\n\nsnap install core\nsnap refresh core\nsnap install --classic certbot\nln -s /snap/bin/certbot /usr/bin/certbot\n\ncertbot certonly --standalone -d PLUG_N_MEET_SERVER_DOMAIN -d TURN_SERVER_DOMAIN \\\n-d ETHERPAD_SERVER_DOMAIN -d LIVEKIT_SERVER_DOMAIN \\\n--non-interactive --agree-tos --email YOUR_EMAIL \\\n--http-01-port=9080\n\nln -s /etc/letsencrypt/live/PLUG_N_MEET_SERVER_DOMAIN/fullchain.pem /etc/haproxy/ssl/PLUG_N_MEET_SERVER_DOMAIN.pem\nln -s /etc/letsencrypt/live/PLUG_N_MEET_SERVER_DOMAIN/privkey.pem /etc/haproxy/ssl/PLUG_N_MEET_SERVER_DOMAIN.pem.key\n\nopenssl dhparam -out /etc/haproxy/dhparams-2048.pem 2048\nwget https://raw.githubusercontent.com/mynaparrot/plugNmeet-install/main/install-files/001-restart-haproxy -O /etc/letsencrypt/renewal-hooks/post/001-restart-haproxy\nchmod +x /etc/letsencrypt/renewal-hooks/post/001-restart-haproxy\n\nservice haproxy stop\n")),(0,a.kt)("p",null,"Now edit ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/haproxy/haproxy.cfg")," as bellow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"global\n    log /dev/log    local0\n    log /dev/log    local1 notice\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    # Default SSL material locations\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n    ssl-dh-param-file /etc/haproxy/dhparams-2048.pem\n\n    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    log global\n    mode    http\n    #option httplog\n    option  dontlognull\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n    default-server init-addr last,libc,none\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend frontend-http\n    bind :80\n    mode http\n\n    # ACL for detecting Let's Encrypt validation requests\n    acl is_certbot path_beg /.well-known/acme-challenge/\n    use_backend backend-certbot if is_certbot\n\n    ## without acme-challenge we'll redirect to https\n    ## because our service won't work on non-ssl\n    http-request redirect scheme https if ! is_certbot\n\n    ## by default it will be certbot server\n    default_backend backend-certbot\n\nbackend backend-certbot\n    mode http\n    server certbot 127.0.0.1:9080\n\nfrontend ft_ssl\n    mode tcp\n\n    # HAProxy will take the fitting certificate from the available ones\n    bind *:443 ssl crt /etc/haproxy/ssl/\n\n    tcp-request inspect-delay 5s\n    tcp-request content accept if { req_ssl_hello_type 1 }\n\n    # Pass TURN requests to LiveKit Turn server\n    # LiveKit expects unencrypted traffic on tls_port,\n    # and still advertise tls_port as a TURN/TLS candidate.\n    use_backend bk_livekit_turn  if { ssl_fc_sni -i TURN_SERVER_DOMAIN }\n    use_backend bk_livekit  if { ssl_fc_sni -i LIVEKIT_SERVER_DOMAIN }\n    use_backend bk_etherpad  if { ssl_fc_sni -i ETHERPAD_SERVER_DOMAIN }\n\n    ## default will be bk_plugnmeet_server\n    default_backend bk_plugnmeet_server\n\nbackend bk_livekit_turn\n    mode tcp\n\n    server s1 100.100.100.10:5349 check\n    server s2 100.100.100.11:5349 check\n    server s3 100.100.100.12:5349 check\n\nbackend bk_plugnmeet_server\n    mode http\n    option forwardfor\n\n    # Pass the requests to plugnmeet-server\n    server s1 100.100.100.1:8080 check\n    server s2 100.100.100.2:8080 check\n\nbackend bk_livekit_api\n    mode http\n    option forwardfor\n\n    # Pass the requests to the LiveKit HTTP API\n    server s1 100.100.100.10:7880 check\n    server s2 100.100.100.11:7880 check\n    server s3 100.100.100.12:7880 check\n\nbackend bk_etherpad\n    mode http\n    option forwardfor\n\n    # Pass the requests to etherpad\n    server s1 100.100.100.30:9001 check\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"TURN_SERVER_DOMAIN"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"LIVEKIT_SERVER_DOMAIN"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ETHERPAD_SERVER_DOMAIN")," with correct information"),(0,a.kt)("p",null,"Now start haproxy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"service start haproxy\n")),(0,a.kt)("p",null,"Now using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mynaparrot/plugNmeet-client"},"client")," you should be able to connect with ",(0,a.kt)("inlineCode",{parentName:"p"},"plugNmeet")))}d.isMDXComponent=!0}}]);